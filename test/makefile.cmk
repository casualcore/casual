from casual.make.functiondefinitions import *

Include( "$(CASUAL_BUILD_ENVIRONMENT)")

SetIncludePaths( ["include",
	"../common/include",
	"../serviceframework/include",
	"../xatmi/include",
	"$(YAML_INCLUDE_PATH)",
    "$(UNITTEST_INCLUDE_PATH)"
    ])
SetLibraryPaths( ["../xatmi/bin",
	"../common/bin",
	"../buffer/bin",
	"../serviceframework/bin",
	"$(YAML_LIBRARY_PATH)",
	"$(JSON_LIBRARY_PATH)",
	"$(IBM_DB_LIB)"
	])





LinkArchive( "sftestproxy", 
	[ 
	   Compile( "source/sf_testproxy.cpp", "obj/sf_testproxy.o")
	])






LinkServer( "test",
	[ Compile( "source/template_server.cpp", "obj/template_server.o")],
	[ 
		"casual-xatmi", 
		"casual-common", 
		"casual-sf",
		"casual-mockup-rm"
	],
	"source/template_server.yaml",
	["rm-mockup"])



#Compile( "source/template_server_dispatcher.c", "obj/template_server_dispatcher.o")

#LinkExecutable("test",
#    ["obj/template_server_dispatcher.o",
#    "obj/template_server.o"],
#    ["casual-xatmi", "casual-common", "casual-mockup"])	
    	


#
# Compile and link VO:n
#


LinkArchive( "sf-test-vo",
    [
	   Compile( "source/sf_testvo.cpp", "obj/sf_testvo.o")
	])


#
# compile and link the sf-template-server
#


LinkServer("sf_test",
    [
	   Compile( "source/template_sf_server.cpp", "obj/template_sf_server.o"),
	   Compile( "source/template_sf_server_implementation.cpp", "obj/template_sf_server_implementation.o"),
    ],
    [
	"sf-test-vo",
    "casual-xatmi",
    "casual-common",
    "casual-sf"
    ],
	[
    "casual_sf_test1",
    "casual_sf_test2"
    ])


	


LinkExecutable( "test_client",
	[ 
		Compile( "source/template_client.cpp", "obj/template_client.o")
	], 
    ["casual-common", "casual-xatmi"])
	



LinkExecutable( "test_multicall_client",
	[
		Compile( "source/test_multicall.cpp", "obj/test_multicall.o")
	], ["casual-common", "casual-xatmi", "casual-sf"])
	

LinkExecutable( "test_proxycall_client",
	[ 
		Compile( "source/test_proxycall.cpp", "obj/test_proxycall.o")
    ], 
	["casual-sf", "sftestproxy", "casual-xatmi"])
	
	
#
# unittest
#

LinkIsolatedUnittest( "test-casual-generation-isolated",
    [
	   Compile( "unittest/isolated/source/test_yaml_sf_generation.cpp", "unittest/isolated/obj/test_yaml_sf_generation.o")
	],
    ["casual-sf", "casual-xatmi", "yaml-cpp"])
	
	
#
# Compile and link detoct-generated vo and server
#


LinkServer("sf-detoct-test-server",
    [ 
	   Compile( "source/sf_testserverserver.cpp", "obj/sf_testserverserver.o"),
	   Compile( "source/sf_testserverimplementation.cpp", "obj/sf_testserverimplementation.o")
	],
    ["sf-test-vo",
    "casual-sf",
    "casual-xatmi"],
    ["casual_sf_test1","casual_sf_test2"])

#
# Install
#
InstallExecutable("test","$CASUAL_HOME/bin/.")
InstallExecutable("sf_test","$CASUAL_HOME/bin/.")
InstallExecutable("test_client","$CASUAL_HOME/bin/.")
InstallExecutable("test_multicall_client","$CASUAL_HOME/bin/.")
InstallExecutable("sf-detoct-test-server","$CASUAL_HOME/bin/.")

	
	
