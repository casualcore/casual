#!groovy

//
// Use this to set version of casual
//

//
// Extract current version
//
def retrieve_major_minor()
{
   def version_finder = env.BRANCH_NAME =~ /\S+?\/([0-9\.]+)\/?\S*/
   if ( version_finder.size() == 1 )
   {
      return version_finder[0][1]
   }
   throw new Exception(env.BRANCH_NAME + " not supported format for pipeline builds")
}

def isMaster()
{
   return env.BRANCH_NAME == "master"
}

def isDevelop()
{
   return ( env.BRANCH_NAME.startsWith("feature/") && env.BRANCH_NAME.endsWith("/dev") )
}

def isRelease()
{
   return env.BRANCH_NAME.startsWith("release/")
}

def isFeature()
{
   return env.BRANCH_NAME.startsWith("feature/") && !env.BRANCH_NAME.endsWith("/dev")
}

def isPublishable()
{
   if ( isDevelop() || isRelease())
   {
      return true
   }
   return false
}

def normalizeBranchName( string)
{
   return string.replaceAll("feature/[0-9.]+/","").replaceAll("/","_").replaceAll("-", "_") 
}

def rpmRelease()
{
   return env.CASUAL_RELEASE
}

def selectExtendedVersion()
{
   if (isDevelop())
      return "-" + env.CASUAL_RELEASE
   if ( isRelease())
      return ""
   return "-" + env.CASUAL_RELEASE
}

def totalVersion()
{
    return env.CASUAL_VERSION + selectExtendedVersion()
}

def setCurrentVersionAndRelease()
{
   if ( isRelease())
   {
      // 1.2.buildnumber
      env.CASUAL_VERSION = retrieve_major_minor().concat('.').concat(env.BUILD_NUMBER)
      env.CASUAL_RELEASE = "1"
   }
   else if (isDevelop())
   {
      // 1.2-beta.buildnumber
      env.CASUAL_VERSION = retrieve_major_minor()
      env.CASUAL_RELEASE = "beta." + env.BUILD_NUMBER
   }
   else if (isFeature())
   {
      // 1.2-alpha.branchname.buildnumber
      env.CASUAL_VERSION = retrieve_major_minor()
      env.CASUAL_RELEASE = "alpha." + normalizeBranchName(env.BRANCH_NAME) + "." + env.BUILD_NUMBER
   }
   else
   {
      throw new Exception( "Branch name " + env.BRANCH_NAME + " not supported in builds")
   }
}

try
{
   if (isMaster())
   {
      currentBuild.result = 'SUCCESS'
      return
   }

   currentBuild.result = 'SUCCESS'
   slackSend color: "good", message: "Build started: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)"

   // need to be called before defines later in script
   setCurrentVersionAndRelease()
}
catch (Exception e)
{
   slackSend color: "danger", message: "Build failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)"
   currentBuild.result = 'FAILURE'
   return
}

def common_backend_builder = '''
umask 000
mkdir -p /git/casual/dumps

export CASUAL_REPO_ROOT=/git/casual/casual
export CASUAL_TOOLS_HOME=$CASUAL_REPO_ROOT
export PYTHONPATH=$CASUAL_REPO_ROOT/..
export CASUAL_THIRDPARTY=/git/casual/casual-thirdparty
export CASUAL_BUILD_HOME=$CASUAL_REPO_ROOT
export CASUAL_OPTIONAL_INCLUDE_PATHS="${CASUAL_THIRDPARTY}/googletest/include"
export CASUAL_OPTIONAL_LIBRARY_PATHS="${CASUAL_THIRDPARTY}/googletest/bin"
export CASUAL_HOME=/opt/casual
export PATH=$CASUAL_BUILD_HOME/tools/bin:$CASUAL_TOOLS_HOME/bin:$CASUAL_HOME/bin:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CASUAL_HOME/lib:$CASUAL_BUILD_HOME/configuration/bin:$CASUAL_BUILD_HOME/common/bin:$CASUAL_BUILD_HOME/serviceframework/bin:$CASUAL_BUILD_HOME/xatmi/bin:/usr/local/lib

cd /git/casual 
find . -name "*.gc*" -print | xargs rm > /dev/null
find . -name "report.xml" -print | xargs rm > /dev/null
rm -rf middleware/.casual/unittest/.singleton/.domain-singleton > /dev/null

export CASUAL_THIRDPARTY=/git/casual/casual-thirdparty
cd $CASUAL_REPO_ROOT && \
      casual-make --no-colors -d -a --use-valgrind make && \
      casual-make --no-colors clean && \
      casual-make --no-colors -d -a --use-valgrind compile && \
      casual-make --no-colors -d -a --use-valgrind link && \
      ISOLATED_UNITTEST_DIRECTIVES="--gtest_output='xml:report.xml'" casual-make --no-colors test && \
      mkdir -p $CASUAL_REPO_ROOT/coverage && \
      casual-make --no-colors make && \
      casual-make --no-colors clean && \
      casual-make --no-colors compile && \
      casual-make --no-colors link && \
      casual-make --no-colors install && \
      cd $CASUAL_REPO_ROOT && python thirdparty/setup/install_nginx.py && \
      cp $CASUAL_REPO_ROOT/package/casual-middleware.spec /root/rpmbuild/SPECS/. && \
      rpmbuild -bb --noclean --define "casual_version $CASUAL_VERSION" --define "casual_release $CASUAL_RELEASE" --define "distribution $DISTRIBUTION" /root/rpmbuild/SPECS/casual-middleware.spec  && \
      cp /root/rpmbuild/RPMS/x86_64/casual-middleware*.rpm $CASUAL_REPO_ROOT/. && \
      performCoverageMeasuring 
      returncode=$?

cd /git/casual/
find /git/casual -user root | xargs chmod 777
 
exit $returncode
'''

// Script for the backend builder centos
def backend_builder_centos = '''#! /bin/sh
CASUAL_VERSION=''' + env.CASUAL_VERSION + '''
CASUAL_RELEASE=''' + rpmRelease() + '''
DISTRIBUTION="centos"
BRANCH=''' + env.BRANCH_NAME + '''
export CASUAL_BUILD_VERSION=''' + totalVersion() + '''

performCoverageMeasuring()
{
   echo "Perform no coverage measuring"
   # cd /git/casual && \
   # mkdir -p /git/casual/coverage && \
   # gcovr -r . --html --html-details --gcov-exclude='.*thirdparty.*|.*test_.*' -o coverage/index.html
}

source scl_source enable devtoolset-9

''' + common_backend_builder

// Script for the backend builder suse
def backend_builder_suse = '''#! /bin/sh
CASUAL_VERSION=''' + env.CASUAL_VERSION + '''
CASUAL_RELEASE=''' + rpmRelease() + '''
DISTRIBUTION="suse"
BRANCH=''' + env.BRANCH_NAME + '''
export CASUAL_BUILD_VERSION=''' + totalVersion() + '''

performCoverageMeasuring()
{
   echo "Perform no coverage measuring"
}


''' + common_backend_builder

// Script for the frontend builder
def frontend_builder = '''#! /bin/sh
umask 000
cd /git/casual/webapp
bower update --allow-root
touch bower_components/app-route/app-location.html
polymer build
cd ..
zip -q -r casual-webapp.zip webapp
chmod a+w -R .
'''

// Dockerfile for creating testcontainer
def dockerfile = '''FROM centos:latest
MAINTAINER flurig <flurig@localhost>

RUN yum  -y install wget cmake make python rsync libuuid-devel sqlite-devel gcc-c++ zlib-devel unzip rpm-build
RUN wget http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm
RUN rpm -Uvh epel-release*rpm
RUN yum -y install pugixml yaml-cpp03

ARG CASUAL_RPM
COPY ${CASUAL_RPM} /tmp/casual-middleware.rpm
RUN rpm -i -p /tmp/casual-middleware.rpm

RUN useradd -ms /bin/bash casual

ENV CASUAL_HOME /opt/casual
ENV PATH $CASUAL_HOME/bin:$PATH
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:$CASUAL_HOME/lib
ENV CASUAL_DOMAIN_HOME /test/casual
ENV CASUAL_LOG_PATH $CASUAL_DOMAIN_HOME/casual.log
ENV CASUAL_LOG '(error|warning|information)'

RUN mkdir -p $CASUAL_DOMAIN_HOME/logs
RUN cp -r /opt/casual/example/domain/single/minimal/* $CASUAL_DOMAIN_HOME/.
RUN cp $CASUAL_HOME/configuration/example/resources.yaml $CASUAL_HOME/configuration/.
RUN chown -R casual $CASUAL_DOMAIN_HOME
RUN chown -R casual $CASUAL_HOME/nginx
RUN ln -s /dev/stdout /test/casual/casual.log
RUN chgrp -Rf root $CASUAL_DOMAIN_HOME $CASUAL_HOME/nginx && chmod -Rf g+w $CASUAL_DOMAIN_HOME $CASUAL_HOME/nginx

EXPOSE 8080 7771
USER casual
WORKDIR $CASUAL_DOMAIN_HOME

ENTRYPOINT ["casual-domain-manager", "-c", "configuration/domain.yaml"]
'''

def build( name, image, content)
{
   def current_dir = pwd()
   writeFile file: 'builder.sh', text: content

   sh """
   chmod +x builder.sh
   docker pull $image
   docker run --rm -v $current_dir:/git/casual:Z $image /git/casual/builder.sh
   """
}

try
{
   echo totalVersion()

   parallel(
   
      "frontend":
      {
         node("frontend")
         {
            deleteDir()
            stage('Build frontend')
            {
               checkout scm
               
               build( 'casualfrontend', 'casual/frontend-builder', frontend_builder)

               stash includes: '**/casual-webapp.zip', name: 'frontend'
            }
         }
      },
      
      "documentation":
      {
         node( "documentation")
         {
            if ( true || isPublishable() )
            {
               deleteDir()
               stage('Documentation')
               {
                  sh """
                  mkdir casual casual-documentation
                  """
                  dir("casual")
                  {
                     checkout scm
                  }
                  dir("casual-documentation")
                  {
                     git branch: 'master', url: 'https://bitbucket.org/casualcore/casual-documentation.git'
                     sh """
                        export CASUAL_BUILD_HOME=$WORKSPACE/casual
                        cd casual/casual-middleware
                        export CASUAL_VERSION=$CASUAL_VERSION
                        export CASUAL_RELEASE=$CASUAL_RELEASE
                        make html
                     """

                     def path = "${WORKSPACE}"
                     def directories = path.split("/")
                     echo "http://casual.laz.se/documentation/workspace/" + directories[-1] + "/casual-documentation/casual/casual-middleware/build/html/"

                  }
               }
            }
         }
      }
   )    
   
   parallel(
      "suse" :
      {
         node( "cplusplus" && "suse")
         {
            try
            { 

               deleteDir()

               stage( "checkout repos")
               {

                  dir("casual-thirdparty")
                  {
                     // casual-thirdparty
                     git branch: 'master', url: 'https://bitbucket.org/casualcore/casual-thirdparty.git'
                  }

                  dir("casual")
                  {
                     // casual
                     checkout scm
                  }
               }

               stage('Build backend - Unittest - Suse')
               {                  
                  unstash 'frontend'
                  
                  build( 'susecompile', 'casual/suse-builder'.concat(':').concat(retrieve_major_minor()), backend_builder_suse)

                  archive includes: '**/casual-middleware*.rpm'
                  
                  stash includes: '**/casual-middleware*.rpm', name: 'suse_backend'
               }
            }
            catch (Exception e)
            {
               archive includes: '**/casual.log'
               throw e
            }
         }
      },
      "centos" :
      {
         node( "cplusplus" && "centos")
         {
            try
            { 
               deleteDir()

               stage( "checkout repos")
               {

                  dir("casual-thirdparty")
                  {
                     // casual-thirdparty
                     git branch: 'master', url: 'https://bitbucket.org/casualcore/casual-thirdparty.git'
                  }

                  dir("casual")
                  {
                     // casual
                     checkout scm
                  }
               }

               stage('Build backend - Unittest/CodeCoverage - Centos')
               {
                  unstash 'frontend'
                  
                  build( 'centoscompile', 'casual/centos-builder'.concat(':').concat(retrieve_major_minor()), backend_builder_centos)

                  step([$class: 'XUnitBuilder',
                     thresholds: [[$class: 'FailedThreshold', failureThreshold: '1']],
                     tools: [[$class: 'GoogleTestType', pattern: '**/report.xml']]])

                  archive includes: '**/casual-middleware*.rpm'

                  stash includes: '**/casual-middleware*.rpm', name: 'centos_backend'
/*
                  publishHTML (target: [
                     allowMissing: false,
                     alwaysLinkToLastBuild: false,
                     keepAll: true,
                     reportDir: 'coverage',
                     reportFiles: '*.html',
                     reportName: "GCOV Report"
                  ])
*/
               }

               if ( isPublishable() )
               {
                  stage('Create container - Centos')
                  {
                     // Setup files
                     writeFile file: 'Dockerfile', text: dockerfile

                     sh '''
                     docker build -t casual/middleware-centos --build-arg CASUAL_RPM=$(ls -t casual/casual-middleware-*.rpm|head -1) -f Dockerfile .
                     '''
                  }

                  stage('Publishing to dockerhub - Centos')
                  {
                     sh """
                     docker tag casual/middleware-centos casual/middleware:latest
                     docker push casual/middleware
                     """
                  }

                  stage('Deploy - Centos')
                  {
                     sh """
                     if [[ -d /var/lib/jenkins/git/casual/docker ]]
                     then
                        cd /var/lib/jenkins/git/casual/docker
                        ./restart.sh
                     else
                        echo "Mock deploy"
                     fi
                     """
                  } 
               }
            }
            catch (Exception e)
            {
               archive includes: '**/casual.log'
               throw e
            }
         }
      }
   )

   node( "publishing")
   {
      if ( isPublishable() )
      {
         stage('Tag')
         {
            deleteDir()

            dir("casual")
            {
               checkout scm

               withCredentials([usernameColonPassword(credentialsId: '628eddfb-34f4-46de-9e61-c73b86ac681e', variable: 'USERPASS')])
               {
                  tag = totalVersion()
                  sh """
                  git tag -a -m "Jenkins" $tag
                  git push https://${USERPASS}@bitbucket.org/casualcore/casual.git $tag
                  """
               }
            }
         }

         stage('publish')
         {
            unstash "suse_backend"
            unstash "centos_backend"

            withCredentials([usernameColonPassword(credentialsId: '628eddfb-34f4-46de-9e61-c73b86ac681e', variable: 'USERPASS')])
            {
               version=totalVersion()
               sh """
               set +x
               for filename in \$( ls casual/casual-middleware-${version}*.rpm )
               do
                  curl -X POST --user "${USERPASS}" "https://api.bitbucket.org/2.0/repositories/casualcore/casual/downloads" --form files=@"\$filename"
               done
               """
            }
         }
      }
   }

   slackSend color: "good", message: "Build finished: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)"
   currentBuild.result = 'SUCCESS'
}
catch (Exception e)
{
   slackSend color: "danger", message: "Build failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)"
   currentBuild.result = 'FAILURE'
}

