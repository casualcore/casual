from casual.make.directive import *



if sys.platform.startswith('darwin'):
    
    
    platform_specific_libs = [ 'c', 'iconv', 'resolv']
    
    platform_specific_lib_paths = [ '/opt/local/lib' ]
    
    
else:
    platform_specific_libs = ['uuid', 'resolv']
    
    platform_specific_lib_paths = []



IncludePaths( [ 
    'include',
    '../xatmi/include',
    '../buffers/include',
    '../transaction/include',
    '../serviceframework/include',
    '../buffers/include',
    '$(UNITTEST_INCLUDE_PATH)'
    ])

LibraryPaths( platform_specific_lib_paths + [ '$(UNITTEST_LIBRARY_PATH)'])


install_libs = []


casual_common_objectfiles = [
    Compile( 'source/server/context.cpp'),
    Compile( 'source/server/lifetime.cpp'),
    Compile( 'source/call/context.cpp'),
    Compile( 'source/call/timeout.cpp'),
    Compile( 'source/buffer/x_octet.cpp'),
    Compile( 'source/buffer/pool.cpp'),
    Compile( 'source/transaction/context.cpp'),
    Compile( 'source/transaction/id.cpp'),
    Compile( 'source/transaction/resource.cpp'),
    Compile( 'source/ipc.cpp'),
    Compile( 'source/queue.cpp'),
    Compile( 'source/message/type.cpp'),
    Compile( 'source/message/handle.cpp'),
    
    Compile( 'source/uuid.cpp'),
    Compile( 'source/environment.cpp'),
    Compile( 'source/file.cpp'),
    Compile( 'source/string.cpp'),
    Compile( 'source/signal.cpp'),
    Compile( 'source/log.cpp'),
    Compile( 'source/trace.cpp'),
    Compile( 'source/error.cpp'),
    Compile( 'source/chronology.cpp'),
    Compile( 'source/process.cpp'),
    Compile( 'source/network_byteorder.cpp'),
    Compile( 'source/transcode.cpp'),
]


common = LinkLibrary( 'bin/casual-common', 
	casual_common_objectfiles,
	platform_specific_libs)

install_libs.append( common)

#
# Mockup stuff, only for unittest
#
mockup = LinkLibrary( 'bin/casual-mockup', 
     [
       #Compile( 'source/mockup.cpp', 'obj/mockup.o'),
       Compile( 'source/mockup/ipc.cpp'),
     ],
     [ common])

install_libs.append( mockup)

#
# The mockup-rm, only for testing
#
target = LinkLibrary( 'bin/casual-mockup-rm', 
     [
       Compile( 'source/mockup/rm.cpp')
     ],
     [ common])

install_libs.append( target)

mockup_unittest = LinkLibrary( 'bin/casual-mockup-unittest-environment',
    [ 
      Compile( 'source/mockup/unittest_envrionment.cpp'),  
    ],
    [ common, mockup, 'gtest'])

install_libs.append( mockup_unittest)


target_simple_process = LinkExecutable( 'bin/simple_process',
    [
     Compile( 'unittest/isolated/source/simple_process.cpp')
    ], 
    [ common]
    )	
	
   
#
# unittest
#
unittest_objectfiles = [
   Compile( 'unittest/isolated/source/test_buffer.cpp'),
   Compile( 'unittest/isolated/source/test_ipc.cpp'),
   Compile( 'unittest/isolated/source/test_marshal.cpp'),
   Compile( 'unittest/isolated/source/test_queue.cpp'),
   Compile( 'unittest/isolated/source/test_message_dispatch.cpp'),
   Compile( 'unittest/isolated/source/test_server_context.cpp'),
   
   Compile( 'unittest/isolated/source/test_uuid.cpp'),
   Compile( 'unittest/isolated/source/test_arguments.cpp'),
   Compile( 'unittest/isolated/source/test_file.cpp'),
   Compile( 'unittest/isolated/source/test_process.cpp'),
   Compile( 'unittest/isolated/source/test_string.cpp'),
   Compile( 'unittest/isolated/source/test_error.cpp'),
   Compile( 'unittest/isolated/source/test_network_byteorder.cpp'),
   
   Compile( 'unittest/isolated/source/test_signal.cpp'),
   
   Compile( 'unittest/isolated/source/test_transaction_id.cpp'),
   Compile( 'unittest/isolated/source/test_algorithm.cpp'),
   
   Compile( 'unittest/isolated/source/test_mockup.cpp'),
   Compile( 'unittest/isolated/source/test_traits.cpp'),
   Compile( 'unittest/isolated/source/test_chronology.cpp'),
   Compile( 'unittest/isolated/source/test_transcode.cpp'),
]



target_test_common = LinkIsolatedUnittest( 'bin/test-casual-common-isolated', 
	unittest_objectfiles,
	[
     common,
     mockup,
     mockup_unittest,
    ])		

#
# We execute 'simple_process' from test-casual-common-isolated, so
# we need to meke sure simple_process is built before
#
Dependencies( target_test_common, [ target_simple_process ]);

#
# Install 
#
Install( install_libs, '$(CASUAL_HOME)/lib')





