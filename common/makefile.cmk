from casual.make.functiondefinitions import *

if sys.platform.startswith('darwin'):
    UUIDLIB='c'
else:
    UUIDLIB='uuid'



IncludePaths( [ 
    'include',
    '../xatmi/include',
    '../buffers/include',
    '../transaction/include',
    '../serviceframework/include',
    '../buffers/include',
    '$(UNITTEST_INCLUDE_PATH)'
    ])

LibraryPaths( [ '$(UNITTEST_LIBRARY_PATH)'])


install_libs = []


casual_common_objectfiles = [
    Compile( 'source/server_context.cpp', 'obj/server_context.o'),
    Compile( 'source/calling_context.cpp', 'obj/calling_context.o'),
    Compile( 'source/buffer/x_octet.cpp', 'obj/buffer/x_octet.o'),
    Compile( 'source/buffer/pool.cpp', 'obj/buffer/pool.o'),
    Compile( 'source/transaction_context.cpp', 'obj/transaction_context.o'),
    Compile( 'source/transaction_id.cpp', 'obj/transaction_id.o'),
    Compile( 'source/ipc.cpp', 'obj/ipc.o'),
    Compile( 'source/queue.cpp', 'obj/queue.o'),
    Compile( 'source/message/type.cpp', 'obj/message/type.o'),
    Compile( 'source/message/handle.cpp', 'obj/message/handle.o'),
    
    Compile( 'source/uuid.cpp', 'obj/uuid.o'),
    Compile( 'source/environment.cpp', 'obj/environment.o'),
    Compile( 'source/file.cpp', 'obj/file.o'),
    Compile( 'source/string.cpp', 'obj/string.o'),
    Compile( 'source/signal.cpp', 'obj/signal.o'),
    Compile( 'source/log.cpp', 'obj/log.o'),
    Compile( 'source/trace.cpp', 'obj/trace.o'),
    Compile( 'source/error.cpp', 'obj/error.o'),
    Compile( 'source/chronology.cpp', 'obj/chronology.o'),
    Compile( 'source/process.cpp', 'obj/process.o'),
    Compile( 'source/network_byteorder.cpp', 'obj/network_byteorder.o'),
]


common = LinkLibrary( 'bin/casual-common', 
	casual_common_objectfiles,
	[UUIDLIB])

install_libs.append( common)

#
# Mockup stuff, only for unittest
#
mockup = LinkLibrary( 'bin/casual-mockup', 
     [
       #Compile( 'source/mockup.cpp', 'obj/mockup.o'),
       Compile( 'source/mockup/ipc.cpp', 'obj/mockup/ipc.o'),
     ],
     [ common])

install_libs.append( mockup)

#
# The mockup-rm, only for testing
#
target = LinkLibrary( 'bin/casual-mockup-rm', 
     [
       Compile( 'source/mockup/rm.cpp', 'obj/mockup/rm.o')
     ],
     [ common])

install_libs.append( target)

mockup_unittest = LinkLibrary( 'bin/casual-mockup-unittest-environment',
    [ 
      Compile( 'source/mockup/unittest_envrionment.cpp', 'obj/mockup/unittest_envrionment.o'),  
    ],
    [ common, mockup, 'gtest'])

install_libs.append( mockup_unittest)


target_simple_process = LinkExecutable( 'bin/simple_process',
    [
     Compile( 'unittest/isolated/source/simple_process.cpp', 'unittest/isolated/obj/simple_process.o')
    ], 
    [ common]
    )	
	
   
#
# unittest
#
unittest_objectfiles = [
   Compile( 'unittest/isolated/source/test_buffer.cpp', 'unittest/isolated/obj/test_buffer.o'),
   Compile( 'unittest/isolated/source/test_ipc.cpp', 'unittest/isolated/obj/test_ipc.o'),
   Compile( 'unittest/isolated/source/test_marshal.cpp', 'unittest/isolated/obj/test_marshal.o'),
   Compile( 'unittest/isolated/source/test_queue.cpp', 'unittest/isolated/obj/test_queue.o'),
   Compile( 'unittest/isolated/source/test_message_dispatch.cpp', 'unittest/isolated/obj/test_message_dispatch.o'),
   Compile( 'unittest/isolated/source/test_server_context.cpp', 'unittest/isolated/obj/test_server_context.o'),
   
   Compile( 'unittest/isolated/source/test_uuid.cpp', 'unittest/isolated/obj/test_uuid.o'),
   Compile( 'unittest/isolated/source/test_arguments.cpp', 'unittest/isolated/obj/test_arguments.o'),
   Compile( 'unittest/isolated/source/test_file.cpp', 'unittest/isolated/obj/test_file.o'),
   Compile( 'unittest/isolated/source/test_process.cpp', 'unittest/isolated/obj/test_process.o'),
   Compile( 'unittest/isolated/source/test_string.cpp', 'unittest/isolated/obj/test_string.o'),
   Compile( 'unittest/isolated/source/test_error.cpp', 'unittest/isolated/obj/test_error.o'),
   Compile( 'unittest/isolated/source/test_network_byteorder.cpp', 'unittest/isolated/obj/test_network_byteorder.o'),
   
   Compile( 'unittest/isolated/source/test_signal.cpp', 'unittest/isolated/obj/test_signal.o'),
   
   Compile( 'unittest/isolated/source/test_transaction_id.cpp', 'unittest/isolated/obj/test_transaction_id.o'),
   Compile( 'unittest/isolated/source/test_algorithm.cpp', 'unittest/isolated/obj/test_algorithm.o'),
   
   Compile( 'unittest/isolated/source/test_mockup.cpp', 'unittest/isolated/obj/test_mockup.o'),
   Compile( 'unittest/isolated/source/test_traits.cpp', 'unittest/isolated/obj/test_traits.o'),
]



target_test_common = LinkIsolatedUnittest( 'bin/test-casual-common-isolated', 
	unittest_objectfiles,
	[
     common,
     mockup,
     mockup_unittest,
    ])		

#
# We execute 'simple_process' from test-casual-common-isolated, so
# we need to meke sure simple_process is built before
#
Dependencies( target_test_common, [ target_simple_process ]);

#
# Install 
#
Install( install_libs, '$(CASUAL_HOME)/lib')





