######################################################################
## 
## "globala" statiska variabler som kan anv‰ndas av anv‰ndaren
##
######################################################################





#
# Unittest
UNITTEST_INCLUDE_PATH = $(CASUALMAKE_PATH)/unittest/gtest/include
UNITTEST_LIBRARY_PATH = $(CASUALMAKE_PATH)/unittest/gtest/bin
ISOLATED_UNITTEST_LIB = $(UNITTEST_LIBRARY_PATH)/libgtest.a
#DEPENDENT_UNITTEST_LIB =$(UNITTEST_LIBRARY_PATH)/gtest_main.a $(UNITTEST_LIBRARY_PATH)/libunittestcommon.a $(UNITTEST_LIBRARY_PATH)/libdependentunittest.a

ISOLATED_UNITTEST_DIRECTIVES = --gtest_color=yes

#
# Default libs
#
DEFAULT_LIBS :=  

######################################################################
## 
## Anv‰ndarens variabel-deklarationer. Tas oavkortat frÂn imakefilen:
##
######################################################################

######################################################################
## 
## Compile/Link konfiguration. Dessa kan vara beroende av vad 
## användaren har angett för direktiv i sin imake-fil
##
######################################################################

THIS_MAKEFILE = $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))



COMPILER = g++
CROSSCOMPILER = clang++

#
# Vi är beroende av att vi använder bash
#
SHELL = bash

#
# Vi särskiljer mellan lib och exe enbart för purify och co.
#
LIBRARY_LINKER = g++
ARCHIVE_LINKER = ar rcs

ifndef EXECUTABLE_LINKER
EXECUTABLE_LINKER = g++
endif

#
# Nu stter vi ihop de faktiska kompilator/lnk-direktiven
#
ifdef DEBUG
	COMPILE_DIRECTIVES = -g -pthread -c  -fpic -DRFV_DEBUG
   LINK_DIRECTIVES_LIB = -g -pthread -shared  -fpic
   LINK_DIRECTIVES_EXE = -g -pthread  -fpic 
   LINK_DIRECTIVES_ARCHIVE = -g 
else
   COMPILE_DIRECTIVES = -pthread -c -O3 -fpic -DRFV_DLL
   LINK_DIRECTIVES_LIB = -pthread -shared -O3 -fpic
   LINK_DIRECTIVES_EXE = -pthread -O3 -fpic 
   LINK_DIRECTIVES_ARCHIVE = 
endif

#
# Addera det användaren har definerat
#
COMPILE_DIRECTIVES := $(COMPILE_DIRECTIVES) $(EXTRA_CC_FLAGS)
LINK_DIRECTIVES_LIB := $(LINK_DIRECTIVES_LIB) $(EXTRA_LINK_FLAGS)
LINK_DIRECTIVES_EXE := $(LINK_DIRECTIVES_EXE) $(EXTRA_LINK_FLAGS)

CROSS_COMPILE_DIRECTIVES = -g -c -Wall -pedantic -fcolor-diagnostics -Wno-long-long -DNOWHAT -DRFV_DLL -DRFV_DEBUG

BUILDSERVER = CC='$(EXECUTABLE_LINKER)' $(TUXDIR)/bin/buildserver -v
BUILDCLIENT = CC='$(EXECUTABLE_LINKER)' $(TUXDIR)/bin/buildclient -v

#
# Purify
#
PURIFYOPTIONS = -always-use-cache-dir=yes -lazy-load=no
PURIFY_LINKER = purify purecov $(PURIFYOPTIONS) $(EXECUTABLE_LINKER) -lc -R$(TUXLIB_DIR)
QUANTIFY_LINKER = quantify -always-use-cache-dir $(EXECUTABLE_LINKER) -R$(TUXLIB_DIR)



#
# Användarens definerade paths läggs först för ha företräde
# före default.
# DB2 måste inkluderas före Tuxedo.
#
INCLUDE_PATHS := $(INCLUDE_PATHS) 
LIBRARY_PATHS := $(LIBRARY_PATHS)

#
# Default include/library-paths
#
DEFAULT_INCLUDE_PATHS := ./inc 
DEFAULT_LIBRARY_PATHS := ./bin 
  


#
# Sätt inledande växel för kompilatorn och länkaren.
# 
LIBRARY_PATH_DIRECTIVE=-Wl,-rpath-link=
#
# S‰tt inledande v‰xel fˆr kompilatorn och l‰nkaren.
# 
INCLUDE_PATHS := $(addprefix -I, $(INCLUDE_PATHS) )
LIBRARY_PATHS := $(addprefix -L, $(LIBRARY_PATHS) )
DEFAULT_INCLUDE_PATHS := $(addprefix -I, $(DEFAULT_INCLUDE_PATHS) )
DEFAULT_LIBRARY_PATHS := $(addprefix -L, $(DEFAULT_LIBRARY_PATHS) )

#
# För att generera "header-dependencies"
# Ser till så vi inte får med beroende till db2 och Tuxedo.
#
HEADER_DEPENDENCY_COMMAND = -g++ -MP -MM -DRFV_DLL -isystem $(DB2INCLUDE_DIR) -isystem $(TUXINCLUDE_DIR)



#
# Om inget target anges förutsätter vi att det är "all" som menas...
#
.PHONY all:


#
# Dummy targets för de targets som inte alltid finns i alla
# makefiler.
#
.PHONY make:
.PHONY prep:
.PHONY cross:
.PHONY export_begin:
.PHONY export_headers:
.PHONY export_libraries:
.PHONY export_files:
.PHONY export_end:
.PHONY export:






#
# Purify och quantify
# Vi ska länka med just purify/quantify för alla exekverbara...
# purify/quantify är beroende av att allt byggs...
#
pure: EXECUTABLE_LINKER := $(PURIFY_LINKER)
pure: all

quantify: EXECUTABLE_LINKER := $(QUANTIFY_LINKER)
quantify: all

#
# Se till så eventuella sub-make-filer får tillgång till 
# vad vi har satt EXECUTABLE_LINKER till.
#
export EXECUTABLE_LINKER

#
# Test är beroende av att allt är byggt
#
test: all

#
# link är mest för att få likformighet mot "compile".
# Vi likställer link med "all"
#
link: all



######################################################################
## 
## Det transformerade innehållet i imakefilen följer:
##
######################################################################

