#!/usr/bin/env python

'''
Created on 14 maj 2012

@author: hbergk
'''

#
# Imports
#
import sys
import os
import multiprocessing
from internal.generate import casual_make
import subprocess
import re


from internal import path

from casual.make.color import color

#
# Globals to use
#
GMAKE_OPTIONS=""
FORCE_MAKEMAKE=0
MAKE_PATH="/usr/bin/make"
USER_MAKE_FILE=""




#
# Finding out number of CPUs
#
def numberOfCPUs():
    """ """    
    return multiprocessing.cpu_count()

def handleArguments():
    """Supposed to handle arguments. Not implemented yet."""
    from optparse import OptionParser
    usage = "usage: %prog [options] arg"
    parser = OptionParser(usage)
    
    parser.set_defaults(FORCE_MAKEMAKE=0)
    parser.set_defaults(COLORS=True)
    parser.set_defaults(IGNORE_ERRORS=False)
    parser.set_defaults(USE_VALGRIND=False)
    parser.set_defaults(causal_make_file="makefile.cmk")
    parser.add_option("-f", "--file", dest="causal_make_file") 
    parser.add_option("-d", "--debug", action="store_true", dest="DEBUG")
    parser.add_option("-a", "--analyze", action="store_true", dest="ANALYZE")
    parser.add_option("-r", "--release", action="store_true", dest="RELEASE") 
    parser.add_option("-p", "--force-parallel", action="store_true", dest="FORCE_PARALLEL") 
    parser.add_option("-n", "--force-notparallel", action="store_true", dest="FORCE_NOTPARALLEL")
    parser.add_option("--no-colors", action="store_false", dest="COLORS") 
    parser.add_option("-i","--ignore-errors", action="store_true", dest="IGNORE_ERRORS")
    parser.add_option("--use-valgrind", action="store_true", dest="USE_VALGRIND")  
    
    (options, args) = parser.parse_args()
    
    if args and args[0] in ("make"):
        options.FORCE_MAKEMAKE=1
        
    if args and args[0] in ("clean" , "prep" , "compile" , "export" , "export_headers" ,"cross", "make"):
        options.FORCE_PARALLEL=True
    
    if args and args[0] in ("test") and not options.FORCE_PARALLEL:
        options.FORCE_NOTPARALLEL=1
    
    return (options, args)

def optionsAsString( options):
    """Return option list as string"""
    result=""
    if options.FORCE_PARALLEL:
        result = result + " FORCE_PARALLEL=1 "
    if options.FORCE_NOTPARALLEL:
        result = result + " FORCE_NOTPARALLEL=1 "                  
    if options.DEBUG:
        result = result + " DEBUG=1 "
    if options.ANALYZE:
        result = result + " ANALYZE=1 "                     
    if options.RELEASE:
        result = result + " RELEASE=1 "
    if options.IGNORE_ERRORS:
        result = result + " -i "
    if options.USE_VALGRIND:
        result = result + " VALGRIND=1 "
        
    return result.strip()                



def reformat( line):
    """ reformat output from make and add som colours"""
    
    for regex in reformat.ingore_filters:
        match = regex.match( line)
        if match:
            return ''
     
    for regex, filter in reformat.filters:
        match = regex.match( line)
               
        if match:
            return filter( match)
        
    return line;


reformat.ingore_filters = [
   re.compile(r'(^make.*)Nothing to be done for'),
]

reformat.filters = [ 
    [ re.compile(r'(^(g|c)\+\+).* -o (\S+\.o) (\S+\.cc|\S+\.cpp|\S+\.c).*'),
     lambda match: color.green( 'compile: ') + color.white( match.group(4)) + '\n' ],
    [ re.compile(r'(^ar) \S+ (\S+\.a).*'),  
     lambda match: color.blue( 'archive: ') + color.white( match.group(2)) + '\n' ],
    [ re.compile(r'(^(g|c)\+\+).* -o (\S+) (?:(\S+\.o) ).*'),
     lambda match: color.blue( 'link: ') + color.white( match.group(3)) + '\n' ],
    [ re.compile(r'^(.*[.]cmk )(.*)'),  
     lambda match: color.cyan( 'makefile: ') + color.blue( match.group(2) ) + ' ' + match.group(1) + '\n'],
    [ re.compile(r'(^make.*:)(.*)'),  
     lambda match: color.header( match.group(1) ) + match.group(2) + '\n'],
    [ re.compile(r'^rm -f (.*)'),  
     lambda match: color.header( 'delete: ' ) + match.group(1) + '\n' ],
    [ re.compile(r'^mkdir( [-].+)*[ ](.*)'),  
     lambda match: color.header( 'create: ' ) + match.group( 2) + '\n' ],
    [ re.compile(r'.*casual-build-server[\S\s]+-c (\S+)[\s]+-o (\S+) .*'),  
     lambda match: color.blue( 'buildserver: ' ) + color.white( match.group(2)) + '\n' ],
    [ re.compile(r'^[\S\s]*rsync --checksum -i[\s]+(\S+) (.*)'),  
     lambda match: color.blue( 'prepare install: ') + color.white( match.group(1)) +  ' --> ' +  match.group(2) + '\n' ],
    [ re.compile(r'^(>[a-zA-Z+.]+)[\s]+(.*)'),  
     lambda match: color.green( 'updated: ') + match.group(2) + ' ' + color.blue( match.group(1)) + '\n' ],
    [ re.compile(r'^generates makefile.*from[ ](.*)'),  
     lambda match: color.cyan( 'makefile: ') + color.yellow( 'generate ') + color.white( match.group(1)) + '\n' ],
    [ re.compile(r'^casual-build-resource-proxy.*--output[ ]+([^ ]+)'),  
     lambda match: color.blue( 'build-rm-proxy: ') + color.white( match.group(1)) +'\n' ],
    [ re.compile(r'^ln -s (.*?) (.*)'),  
     lambda match: color.blue( 'symlink: ') + color.white( match.group(2)) + ' --> ' + color.white( match.group(1)) + '\n' ],

];
    
    


if __name__ == '__main__':

    
    (options, args) = handleArguments()
    
    causal_make_file = options.causal_make_file
    
    make_file = path.makefile( causal_make_file)
    
    FORCE_MAKEMAKE=options.FORCE_MAKEMAKE;
            
    
    if len(args) != 1:
        GMAKE_OPTIONS=optionsAsString( options) + " all"
    else:
        GMAKE_OPTIONS=optionsAsString( options) + " " + args[0]


    if not options.COLORS:
        color.active( False)
    
    #
    # Check if we should generate
    #
    if FORCE_MAKEMAKE == 1 or not os.path.isfile( make_file)  or os.path.getmtime( make_file) < os.path.getmtime( causal_make_file) :
        if not os.path.isfile( causal_make_file ):
            sys.stderr.write( color.error( 'error: Could not find the casaul make file ') + causal_make_file + '\n')
            sys.exit( 1)

        sys.stdout.write( reformat( 'generates makefile from ' + os.path.abspath( causal_make_file))) 
    
        try:
            casual_make( causal_make_file)

        except:
            sys.stderr.write( color.error( 'error: ' ) + "Could not generate " + make_file + " from " + causal_make_file + '\n')
            raise
            sys.exit(1)

    #
    # Find number of CPU:s to set jobs and load
    #
    CPU_COUNT=numberOfCPUs()


    if CPU_COUNT == 0:
        sys.stderr.write( color.warning( "warning: Could not detect how many CPU's the machine has - guess on 2\n"))
        CPU_COUNT=2


    JOB_COUNT=CPU_COUNT * 1.5

    #
    # We let max-jobs be the same... Have no idea if this is a good number.
    #
    MAX_LOAD=JOB_COUNT


    #
    # Assemble command
    #
    command = MAKE_PATH + " -j " + str(int(JOB_COUNT)) + " -l " + str(int(MAX_LOAD)) + " " + GMAKE_OPTIONS + " --no-print-directory --no-builtin-rules --no-keep-going -f " + make_file + '\n' 
    
    print color.header( "executes: ") + command
    
    #
    # Call command
    #
    process = subprocess.Popen( command.split(), bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
    
    while process.poll() is None:
        sys.stdout.write( reformat( process.stdout.readline()))
    
    #
    # Manually "flush" stdout...
    # 
    line = process.stdout.readline()
    
    while( line):
        sys.stdout.write( reformat( line))
        line = process.stdout.readline()

    user_target = ''
    if( args):
        user_target = args[0]

    if process.returncode == 0:
        print 'target ' + color.blue( user_target) + ': ' + color.green( 'SUCCESS')
    else:
        print 'target ' + color.blue( user_target) + ': ' + color.error( 'FAILED')
    
    #print reformat( process.stdout.readline())
    
    sys.exit( process.returncode)
    
