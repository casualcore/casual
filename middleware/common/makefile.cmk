import sys
from casual.middleware.make.dsl import *

if sys.platform.startswith('darwin'):
    platform_specific_libs = [ 'c', 'iconv', 'resolv']
    platform_specific_lib_paths = [ '/opt/local/lib' ]
    platform_specific_include_paths = [ '/opt/local/include' ]
else:
    platform_specific_libs = ['uuid', 'resolv']
    platform_specific_lib_paths = []
    platform_specific_include_paths = []


IncludePaths( [ 
    'include',
    '../xatmi/include',
    '../buffers/include',
    '../transaction/include',
    '../serviceframework/include',
    '../buffers/include',
    '$(CASUAL_OPTIONAL_INCLUDE_PATHS)'
    ]
    + platform_specific_include_paths)

LibraryPaths( platform_specific_lib_paths + [ '$(CASUAL_OPTIONAL_LIBRARY_PATHS)'])


install_libs = []


casual_common_objectfiles = [
    Compile( 'source/server/context.cpp'),
    Compile( 'source/server/lifetime.cpp'),
    Compile( 'source/server/handle.cpp'),
    Compile( 'source/server/service.cpp'),
    
    Compile( 'source/service/call/context.cpp'),
    Compile( 'source/service/call/state.cpp'),
    Compile( 'source/service/lookup.cpp'),
    Compile( 'source/service/header.cpp'),
    Compile( 'source/service/type.cpp'),
    
    Compile( 'source/buffer/x_octet.cpp'),
    Compile( 'source/buffer/pool.cpp'),
    Compile( 'source/buffer/transport.cpp'),
    Compile( 'source/buffer/type.cpp'),
    
    Compile( 'source/transaction/context.cpp'),
    Compile( 'source/transaction/id.cpp'),
    Compile( 'source/transaction/resource.cpp'),
    Compile( 'source/transaction/transaction.cpp'),
    
    Compile( 'source/communication/ipc.cpp'),
    Compile( 'source/communication/tcp.cpp'),
    Compile( 'source/communication/message.cpp'),
    Compile( 'source/communication/log.cpp'),
    
    
    Compile( 'source/message/type.cpp'),
    Compile( 'source/message/handle.cpp'),
    Compile( 'source/message/service.cpp'),
    Compile( 'source/message/server.cpp'),
    Compile( 'source/message/traffic.cpp'),
    Compile( 'source/message/queue.cpp'),
    Compile( 'source/message/transaction.cpp'),
    Compile( 'source/message/domain.cpp'),
    Compile( 'source/message/gateway.cpp'),
    
    Compile( 'source/exception.cpp'),
    Compile( 'source/uuid.cpp'),
    Compile( 'source/environment.cpp'),
    Compile( 'source/file.cpp'),
    Compile( 'source/string.cpp'),
    Compile( 'source/signal.cpp'),
    Compile( 'source/log.cpp'),
    Compile( 'source/trace.cpp'),
    Compile( 'source/error.cpp'),
    Compile( 'source/chronology.cpp'),
    Compile( 'source/process.cpp'),
    Compile( 'source/thread.cpp'),
    Compile( 'source/domain.cpp'),
    Compile( 'source/execution.cpp'),
    Compile( 'source/network/byteorder.cpp'),
    Compile( 'source/transcode.cpp'),
    Compile( 'source/timeout.cpp'),
    
    Compile( 'source/arguments.cpp'),
    Compile( 'source/terminal.cpp'),

    
]


common = LinkLibrary( 'bin/casual-common', 
	casual_common_objectfiles,
	platform_specific_libs)

install_libs.append( common)

# lib_terminal = LinkLibrary( 
#    'bin/casual-common-terminal', 
#    [ Compile( 'source/terminal.cpp'),], 
#    [ common])
# 
# install_libs.append( lib_terminal)


#
# The mockup-rm, only for testing
#
target_unittest = LinkLibrary( 'bin/casual-unittest', 
     [
       Compile( 'source/unittest.cpp'),
     ],
     [ common, "gtest"])

#
# Mockup stuff, only for unittest
#
mockup = LinkLibrary( 'bin/casual-mockup', 
     [
       Compile( 'source/mockup/ipc.cpp'),
       Compile( 'source/mockup/domain.cpp'),
       Compile( 'source/mockup/process.cpp'),
       Compile( 'source/mockup/file.cpp'),
       Compile( 'source/mockup/thread.cpp'),
       Compile( 'source/mockup/log.cpp'),
     ],
     [ common, target_unittest])

install_libs.append( mockup)

#
# The mockup-rm, only for testing
#
target = LinkLibrary( 'bin/casual-mockup-rm', 
     [
       Compile( 'source/mockup/rm.cpp')
     ],
     [ common, mockup])

install_libs.append( target)

mockup_unittest = LinkLibrary( 'bin/casual-mockup-unittest-environment',
    [ 
      Compile( 'source/mockup/unittest/envrionment.cpp'),  
    ],
    [ common, mockup, 'gtest'])

install_libs.append( mockup_unittest)


target_simple_process = LinkExecutable( 'bin/simple_process',
    [
     Compile( 'unittest/isolated/source/simple_process.cpp')
    ], 
    [ common]
    )	
	
   
#
# unittest
#
unittest_objectfiles = [
    Compile( 'unittest/isolated/source/test_conformance.cpp'),  
    
    Compile( 'unittest/isolated/source/test_algorithm.cpp'),      
    Compile( 'unittest/isolated/source/test_memory.cpp'),
    Compile( 'unittest/isolated/source/test_pimpl.cpp'),
    
    Compile( 'unittest/isolated/source/test_flag.cpp'),  
            
    Compile( 'unittest/isolated/source/test_signal.cpp'),
                         
    Compile( 'unittest/isolated/source/test_buffer.cpp'),
    Compile( 'unittest/isolated/source/test_marshal.cpp'),
 
    Compile( 'unittest/isolated/source/test_uuid.cpp'),
    Compile( 'unittest/isolated/source/test_arguments.cpp'),
    Compile( 'unittest/isolated/source/test_file.cpp'),
    Compile( 'unittest/isolated/source/test_process.cpp'),
    Compile( 'unittest/isolated/source/test_string.cpp'),
    Compile( 'unittest/isolated/source/test_environment.cpp'),
    Compile( 'unittest/isolated/source/test_error.cpp'),
    
    Compile( 'unittest/isolated/source/network/test_byteorder.cpp'),
    
    Compile( 'unittest/isolated/source/test_traits.cpp'),
    Compile( 'unittest/isolated/source/test_chronology.cpp'),
    Compile( 'unittest/isolated/source/test_transcode.cpp'),
    
    
    Compile( 'unittest/isolated/source/communication/test_tcp.cpp'),
    Compile( 'unittest/isolated/source/communication/test_ipc.cpp'),
    

    
    Compile( 'unittest/isolated/source/message/test_dispatch.cpp'),
    Compile( 'unittest/isolated/source/message/test_coordinate.cpp'),
    
    
    Compile( 'unittest/isolated/source/server/test_context.cpp'),
    Compile( 'unittest/isolated/source/server/test_service.cpp'),
    Compile( 'unittest/isolated/source/server/test_arguments.cpp'),
    
    Compile( 'unittest/isolated/source/service/test_header.cpp'),

    Compile( 'unittest/isolated/source/test_mockup.cpp'),
    
    Compile( 'unittest/isolated/source/transaction/test_id.cpp'),
    Compile( 'unittest/isolated/source/transaction/test_context.cpp'),
]





target_test_common = LinkUnittest( 'bin/test-casual-common-isolated', 
	unittest_objectfiles,
	[
     common,
     mockup,
     mockup_unittest,
    target_unittest,
    ])		

#
# We execute 'simple_process' from test-casual-common-isolated, so
# we need to meke sure simple_process is built before
#
Dependencies( target_test_common, [ target_simple_process ]);

#
# Install 
#
Install( install_libs, '$(CASUAL_HOME)/lib')





