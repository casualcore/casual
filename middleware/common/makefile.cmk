import sys
import os
import casual.make.api as make
import casual.middleware.make.api as dsl


platform_specific_lib_paths = []
platform_specific_include_paths = []
    
if sys.platform.startswith('darwin'):
    
    #(sysname, nodename, release, version, machine) = os.uname()
    
    release = os.uname()[ 2]    
    platform_specific_libs = [ 'c', 'iconv', 'resolv']
    
    if release < '16.3.0':
        platform_specific_lib_paths = [ '/opt/local/lib' ]
        platform_specific_include_paths = [ '/opt/local/include' ]

elif sys.platform.startswith('win') or sys.platform.startswith('cygwin'):
    platform_specific_libs = ['uuid', 'resolv', 'iconv']
else:
    platform_specific_libs = ['uuid', 'resolv']

make.IncludePaths( [ 
        'include',
        '../xatmi/include',
   ]
   + platform_specific_include_paths
   + make.optional_include_paths()
   + dsl.paths().include.serialization
   + dsl.paths().include.gtest
)

make.LibraryPaths( [ 
        'bin',
    ]
    + platform_specific_lib_paths
    + make.optional_library_paths()
    + dsl.paths().library.serialization
    + dsl.paths().library.gtest
)

install_libs = []
install_headers = []


casual_common_objectfiles = [

    make.Compile( 'source/strong/id.cpp'),

    make.Compile( 'source/server/context.cpp'),
    make.Compile( 'source/server/lifetime.cpp'),
    make.Compile( 'source/server/service.cpp'),
    make.Compile( 'source/server/argument.cpp'),
    make.Compile( 'source/server/start.cpp'),
    make.Compile( 'source/server/handle/service.cpp'),
    make.Compile( 'source/server/handle/conversation.cpp'),
    make.Compile( 'source/server/handle/policy.cpp'),
    
    make.Compile( 'source/executable/start.cpp'),

    make.Compile( 'source/service/call/context.cpp'),
    make.Compile( 'source/service/call/state.cpp'),
    make.Compile( 'source/service/conversation/context.cpp'),
    
    make.Compile( 'source/service/lookup.cpp'),
    make.Compile( 'source/service/header.cpp'),
    make.Compile( 'source/service/type.cpp'),
    make.Compile( 'source/service/invoke.cpp'),
    
    make.Compile( 'source/buffer/x_octet.cpp'),
    make.Compile( 'source/buffer/pool.cpp'),
    make.Compile( 'source/buffer/transport.cpp'),
    make.Compile( 'source/buffer/type.cpp'),
    
    make.Compile( 'source/transaction/context.cpp'),
    make.Compile( 'source/transaction/id.cpp'),
    make.Compile( 'source/transaction/resource.cpp'),
    make.Compile( 'source/transaction/transaction.cpp'),
    
    make.Compile( 'source/communication/ipc.cpp'),
    make.Compile( 'source/communication/ipc/message.cpp'),
    make.Compile( 'source/communication/socket.cpp'),
    make.Compile( 'source/communication/tcp.cpp'),
    make.Compile( 'source/communication/tcp/message.cpp'),
    make.Compile( 'source/communication/instance.cpp'),
    make.Compile( 'source/communication/select.cpp'),
    make.Compile( 'source/communication/device.cpp'),
    make.Compile( 'source/communication/stream.cpp'),
    make.Compile( 'source/communication/log.cpp'),

    make.Compile( 'source/message/type.cpp'),    
    make.Compile( 'source/message/handle.cpp'),
    make.Compile( 'source/message/pending.cpp'),
    make.Compile( 'source/message/event.cpp'),

    make.Compile( 'source/event/listen.cpp'),
    make.Compile( 'source/event/dispatch.cpp'),
    make.Compile( 'source/event/send.cpp'),
    
    make.Compile( 'source/log/stream.cpp'),
    make.Compile( 'source/log/trace.cpp'),
    make.Compile( 'source/log/category.cpp'),
    make.Compile( 'source/log.cpp'),

    make.Compile( 'source/code/log.cpp'),
    make.Compile( 'source/code/xatmi.cpp'),
    make.Compile( 'source/code/tx.cpp'),
    make.Compile( 'source/code/xa.cpp'),
    make.Compile( 'source/code/system.cpp'),
    make.Compile( 'source/code/casual.cpp'),
    make.Compile( 'source/code/signal.cpp'),
    make.Compile( 'source/code/convert.cpp'),
    make.Compile( 'source/code/serialize.cpp'),

    
    make.Compile( 'source/exception/handle.cpp'),
    make.Compile( 'source/exception/guard.cpp'),

    make.Compile( 'source/environment.cpp'),
    make.Compile( 'source/environment/string.cpp'),

    make.Compile( 'source/uuid.cpp'),
    make.Compile( 'source/file.cpp'),
    make.Compile( 'source/string.cpp'),

    make.Compile( 'source/signal.cpp'),
    make.Compile( 'source/signal/timer.cpp'),
    
    make.Compile( 'source/chronology.cpp'),
    make.Compile( 'source/process.cpp'),
    make.Compile( 'source/instance.cpp'),
    make.Compile( 'source/thread.cpp'),
    make.Compile( 'source/domain.cpp'),
    make.Compile( 'source/execution.cpp'),
    make.Compile( 'source/network/byteorder.cpp'),
    make.Compile( 'source/transcode.cpp'),
    make.Compile( 'source/metric.cpp'),
    
    make.Compile( 'source/argument.cpp'),
    make.Compile( 'source/argument/cardinality.cpp'),
    
    make.Compile( 'source/terminal.cpp'),

    make.Compile( 'source/serialize/archive.cpp'),
    make.Compile( 'source/serialize/line.cpp'),
    make.Compile( 'source/serialize/log.cpp'),
    make.Compile( 'source/serialize/ini.cpp'),
    make.Compile( 'source/serialize/json.cpp'),
    make.Compile( 'source/serialize/xml.cpp'),
    make.Compile( 'source/serialize/yaml.cpp'),
    make.Compile( 'source/serialize/binary.cpp'),
    make.Compile( 'source/serialize/create.cpp'),
    make.Compile( 'source/serialize/archive/type.cpp'),
]


common = make.LinkLibrary( 'bin/casual-common', 
	casual_common_objectfiles,
	platform_specific_libs + [ 'yaml-cpp', 'pugixml'])

install_libs.append( common)


install_headers += [ 
      ( 'include/casual/platform.h', 'casual'),
]


# Some help for unittest tracing
target_unittest = make.LinkLibrary( 'bin/casual-unittest', 
     [
       make.Compile( 'source/unittest.cpp'),
       make.Compile( 'source/unittest/file.cpp'),
       make.Compile( 'source/unittest/log.cpp'),
       make.Compile( 'source/unittest/thread.cpp'),
       make.Compile( 'source/unittest/eventually/send.cpp'),
     ],
     [ common, "gtest"])

# The mockup-rm, only for testing.
lib_mockup_rm = make.LinkLibrary( 'bin/casual-mockup-rm', 
     [
       make.Compile( 'source/unittest/rm.cpp')
     ],
     [ common, target_unittest])

# Since we use this in our example-servers we "install it"
install_libs.append( lib_mockup_rm)
install_libs.append( target_unittest)


target_simple_process = make.LinkExecutable( 'bin/simple_process',
    [
     make.Compile( 'unittest/source/simple_process.cpp')
    ], 
    [ common]
    )	
	
   
# unittest
unittest_objectfiles = [
    make.Compile( 'unittest/source/test_conformance.cpp'),
    
    make.Compile( 'unittest/source/test_algorithm.cpp'),
    make.Compile( 'unittest/source/test_range.cpp'),
    make.Compile( 'unittest/source/test_execute.cpp'),
    make.Compile( 'unittest/source/test_execution.cpp'),


    make.Compile( 'unittest/source/test_memory.cpp'),
    make.Compile( 'unittest/source/test_pimpl.cpp'),
    
    make.Compile( 'unittest/source/test_flag.cpp'),  
            
    make.Compile( 'unittest/source/test_signal.cpp'),
                         
    make.Compile( 'unittest/source/test_buffer.cpp'),
 
    make.Compile( 'unittest/source/test_uuid.cpp'),
    make.Compile( 'unittest/source/test_file.cpp'),
    make.Compile( 'unittest/source/test_process.cpp'),
    make.Compile( 'unittest/source/test_instance.cpp'),
    make.Compile( 'unittest/source/test_string.cpp'),
    make.Compile( 'unittest/source/test_exception.cpp'),

    make.Compile( 'unittest/source/test_environment.cpp'),
    make.Compile( 'unittest/source/environment/test_variable.cpp'),
    make.Compile( 'unittest/source/environment/test_string.cpp'),
    
    make.Compile( 'unittest/source/network/test_byteorder.cpp'),
    
    make.Compile( 'unittest/source/test_traits.cpp'),
    make.Compile( 'unittest/source/test_chronology.cpp'),
    make.Compile( 'unittest/source/test_transcode.cpp'),
    
    make.Compile( 'unittest/source/communication/test_tcp.cpp'),
    make.Compile( 'unittest/source/communication/test_ipc.cpp'),
    make.Compile( 'unittest/source/communication/test_stream.cpp'),

    make.Compile( 'unittest/source/message/test_dispatch.cpp'),
    make.Compile( 'unittest/source/message/test_coordinate.cpp'),
    make.Compile( 'unittest/source/message/test_pending.cpp'),
    
    make.Compile( 'unittest/source/server/test_service.cpp'),
    make.Compile( 'unittest/source/server/test_arguments.cpp'),
    
    make.Compile( 'unittest/source/service/test_header.cpp'),
    
    make.Compile( 'unittest/source/transaction/test_id.cpp'),
    make.Compile( 'unittest/source/transaction/test_context.cpp'),
   
    make.Compile( 'unittest/source/event/test_dispatch.cpp'),
    make.Compile( 'unittest/source/event/test_listen.cpp'),
    
    make.Compile( 'unittest/source/test_domain.cpp'),

    make.Compile( 'unittest/source/strong/test_type.cpp'),

    make.Compile( 'unittest/source/test_predicate.cpp'),
    make.Compile( 'unittest/source/test_functional.cpp'),

    make.Compile( 'unittest/source/test_argument.cpp'),
    make.Compile( 'unittest/source/test_metric.cpp'),

    make.Compile( 'unittest/source/serialize/test_traits.cpp'),
    make.Compile( 'unittest/source/serialize/test_macro.cpp'),
    make.Compile( 'unittest/source/serialize/test_line.cpp'),
    make.Compile( 'unittest/source/serialize/test_archive.cpp'),
    make.Compile( 'unittest/source/serialize/test_consumed.cpp'),
    make.Compile( 'unittest/source/serialize/test_create.cpp'),
    make.Compile( 'unittest/source/serialize/test_ini.cpp'),
    make.Compile( 'unittest/source/serialize/test_json.cpp'),
    make.Compile( 'unittest/source/serialize/test_log.cpp'),
    make.Compile( 'unittest/source/serialize/test_xml.cpp'),
    make.Compile( 'unittest/source/serialize/test_yaml.cpp'),
    make.Compile( 'unittest/source/serialize/test_relaxed_write_read.cpp'),
    make.Compile( 'unittest/source/serialize/test_write_read.cpp'),
    make.Compile( 'unittest/source/serialize/native/test_binary.cpp'),
    make.Compile( 'unittest/source/serialize/named/test_value.cpp'),
    
    
]


target_test_common = make.LinkUnittest( 'bin/test-casual-common-isolated', 
	unittest_objectfiles,
	[
      common,
      target_unittest,
      lib_mockup_rm,
    ])		

# We execute 'simple_process' from test-casual-common-isolated, so
# we need to make sure simple_process is built before
make.Dependencies( target_test_common, [ target_simple_process ])

# Install 
make.Install( install_libs,  dsl.paths().install + '/lib')
make.Install( install_headers,  dsl.paths().install + '/include')





