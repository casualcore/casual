from casual.middleware.make.dsl import *

IncludePaths( ['include',
	'../common/include',
	'../serviceframework/include',
	'../xatmi/include',
	'../queue/include',
	'../buffer/include',
	'$(CASUAL_OPTIONAL_INCLUDE_PATHS)',
    ])
LibraryPaths( [ 'bin',
	'../xatmi/bin',
	'../common/bin',
	'../queue/bin',
	'../buffer/bin',
	'../serviceframework/bin',
    '../configuration/bin',
	'$(CASUAL_OPTIONAL_LIBRARY_PATHS)',
	])



install_bin = []


archive_proxy = LinkArchive( 'bin/sftestproxy', 
	[ 
	   Compile( 'source/sf_testproxy.cpp')
	])




#
# Compile and link VO:n
#

archive_vo = LinkArchive( 'bin/sf-test-vo',
    [
	   Compile( 'source/sf_testvo.cpp')
	])




target = LinkExecutable( 'bin/test_multicall_client',
	[
		Compile( 'source/test_multicall.cpp')
	], ['casual-common', 'casual-xatmi', 'casual-serviceframework'])
	
install_bin.append( target)


# unittest
#

LinkUnittest( 'unittest/bin/test-casual-basic',
    [
	   Compile( 'unittest/source/domain/test_basic.cpp'),
	   Compile( 'unittest/source/test_yaml_sf_generation.cpp'),
	],
    [ 
		'casual-mockup-unittest-environment',
		'casual-common', 
		'casual-serviceframework', 
		'casual-xatmi', 
		'yaml-cpp', 
		'casual-mockup',
		'casual-unittest',
	])
	
	
#
# Compile and link detoct-generated vo and server
#


LinkExecutable('bin/casual-serviceframework-test-server',
    [ 
	   Compile( 'source/sf_testserverserver.cpp'),
	],
    [
	  archive_vo,
     'casual-serviceframework',
     'casual-common', 
     'casual-xatmi'
    ])

#
# Install
#
Install( install_bin,'$(CASUAL_HOME)/bin')







	
	
