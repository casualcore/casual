

import casual.make.api as make
import casual.middleware.make.api as dsl



make.IncludePaths([
   'include',
   'unittest/include',
   '../common/include',
   '../buffer/include',
   '../configuration/include',
   '../xatmi/include',
   '../cli/include',
   '../serviceframework/include']
   + make.optional_include_paths()
   + dsl.paths().include.gtest
   )


make.LibraryPaths([
    'bin',
    '../common/bin',
    '../configuration/bin',
    '../serviceframework/bin',
    '../xatmi/bin']
    + make.optional_library_paths()
    + dsl.paths().library.gtest
   )


install_bins = []
install_libs = []
install_headers = []

common_library = make.LinkLibrary( 'bin/casual-domain-common', 
 [
    make.Compile( 'source/common.cpp'),
],
[
    'casual-common'
])
install_libs.append(common_library)

manager_archive = make.LinkArchive( 'bin/casual-domain-manager', 
 [
    make.Compile( 'source/manager/transform.cpp'),
    make.Compile( 'source/manager/task/create.cpp'),
    make.Compile( 'source/manager/state.cpp'),
    make.Compile( 'source/manager/state/order.cpp'),
    make.Compile( 'source/manager/handle.cpp'),
    make.Compile( 'source/manager/admin/server.cpp'),
    make.Compile( 'source/manager/configuration.cpp'),
])

# utility for other 'managers'
utility_library = make.LinkLibrary( 'bin/casual-domain-utility',
    [
        make.Compile( 'source/configuration.cpp'),
    ],
    [
        common_library,
        'casual-common',
        'casual-serviceframework'
     ]
)
install_libs.append( utility_library)


target_domain_manager = make.LinkExecutable( 'bin/casual-domain-manager',
    [
      make.Compile( 'source/manager/main.cpp'),
    ],
    [
     manager_archive,
     utility_library,
     common_library,
     'casual-common',
     'casual-configuration',
     'casual-serviceframework'
    ] 
)

install_bins.append( target_domain_manager)


target = make.LinkLibrary( 'bin/casual-domain-admin-cli',
   [
      make.Compile( 'source/manager/admin/cli.cpp'),
   ],
   [
      manager_archive,
      common_library,
      'casual-common',
      'casual-configuration',
      'casual-serviceframework'
   ]
)
install_libs.append( target)

# public api
domain_api = make.LinkLibrary( 'bin/casual-domain-api',
   [
      make.Compile( 'source/manager/api/state.cpp'),
      make.Compile( 'source/manager/api/internal/transform.cpp'),
   ],
   [
      common_library,
      'casual-common',
      'casual-serviceframework'
   ]
)
install_libs.append( domain_api)

install_headers += [ 
   ( 'include/casual/domain/manager/api/model.h', 'casual/domain/manager/api'),
   ( 'include/casual/domain/manager/api/state.h', 'casual/domain/manager/api'),
]

# discovery
discovery_archive = make.LinkArchive( 'bin/casual-domain-discovery-archive',
    [
        make.Compile( 'source/discovery/common.cpp'),
        make.Compile( 'source/discovery/state.cpp'),
    ]
)


discovery_executable = make.LinkExecutable( 'bin/casual-domain-discovery',
    [
        make.Compile( 'source/discovery/main.cpp'),
        make.Compile( 'source/discovery/handle.cpp'),
        make.Compile( 'source/discovery/admin/server.cpp'),
        make.Compile( 'source/discovery/admin/transform.cpp'),
    ],
    [
        discovery_archive,
        utility_library,
        'casual-common',
        'casual-serviceframework',
    ]
)
install_bins.append( discovery_executable)

domain_discovery_library = make.LinkLibrary( 'bin/casual-domain-discovery',
    [
        make.Compile( 'source/discovery/api.cpp'),
    ],
    [
        discovery_archive,
        'casual-common',
    ]
)

install_libs.append( domain_discovery_library)

target = make.LinkLibrary( 'bin/casual-domain-discovery-admin-cli',
    [
        make.Compile( 'source/discovery/admin/cli.cpp'),
    ],
    [
        domain_discovery_library,
        discovery_archive,
        'casual-common',
        'casual-serviceframework',
    ]
)

install_libs.append( target)


#unittest lib for other modules to use (in unittest)
domain_unittest_library = make.LinkLibrary( 'bin/casual-domain-unittest',
    [
        make.Compile( 'unittest/source/manager.cpp'),
        make.Compile( 'unittest/source/configuration.cpp'),
        make.Compile( 'unittest/source/discover.cpp'),
        make.Compile( 'unittest/source/utility.cpp'),
    ],
    [
        common_library,
        domain_discovery_library,
        'casual-common',
        'casual-unittest',
        'casual-serviceframework',   
    ]
)


target_simple_server = make.LinkExecutable( 'bin/test-simple-server',
    [
        make.Compile( 'unittest/source/simple_server.cpp'),
    ],
    [
        'casual-common',
        'casual-unittest'
    ])


target_test_domain = make.LinkUnittest( 'bin/test-casual-domain', 
    [ 
        make.Compile( 'unittest/source/manager/test_state.cpp', directive = ['-Wno-dangling-reference']),
        make.Compile( 'unittest/source/manager/test_manager.cpp'),
        make.Compile( 'unittest/source/manager/test_api.cpp'),
        make.Compile( 'unittest/source/test_discovery.cpp'),
    ],
    [
        manager_archive,
        common_library,
        domain_discovery_library,
        domain_unittest_library,
        utility_library,
        domain_api,
        'casual-common',
        'casual-xatmi',
        'casual-configuration',
        'casual-serviceframework',
        'casual-unittest',
        'casual-configuration-example',
    ]) 

# We use domain-manager and simple-server from the unittests
make.Dependencies( target_test_domain, [ target_domain_manager, target_simple_server, discovery_executable])




make.Install( install_bins, dsl.paths().install + '/bin')
make.Install( install_libs, dsl.paths().install + '/lib')
make.Install( install_headers, dsl.paths().install + '/include')





