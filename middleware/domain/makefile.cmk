

from casual.middleware.make.dsl import *



IncludePaths([
   'include',
   '../common/include',
   '../configuration/include',
   '../xatmi/include',
   '../serviceframework/include',
   '$(CASUAL_OPTIONAL_INCLUDE_PATHS)',
   ])


LibraryPaths([
    'bin',
    '../common/bin',
    '../configuration/bin',
    '../serviceframework/bin',
    '../xatmi/bin',
    '$(CASUAL_OPTIONAL_LIBRARY_PATHS)',
    ])


install_bins = []
install_libs = []

common_archive = LinkArchive( 'bin/casual-domain-common', 
 [
    Compile( 'source/common.cpp'),
])

manager_archive = LinkArchive( 'bin/casual-domain-manager', 
 [
    Compile( 'source/manager/manager.cpp'),
    Compile( 'source/manager/state.cpp'),
    Compile( 'source/manager/handle.cpp'),
    Compile( 'source/manager/admin/server.cpp'),
    Compile( 'source/manager/task.cpp'),
    Compile( 'source/manager/configuration.cpp'),
    Compile( 'source/manager/persistent.cpp'),
    Compile( 'source/transform.cpp'),
])


pending_library = LinkLibrary( 'bin/casual-domain-pending-message',
    [
        Compile( 'source/pending/message/send.cpp'),
    ],
    [
        common_archive,
        'casual-common',
        'casual-serviceframework'
     ]
)
install_libs.append( pending_library)


target_domain_manager = LinkExecutable( 'bin/casual-domain-manager',
    [
      Compile( 'source/manager/main.cpp'),
    ],
    [
     manager_archive,
     pending_library,
     common_archive,
     'casual-common',
     'casual-configuration',
     'casual-serviceframework'
    ] 
)

install_bins.append( target_domain_manager)


target = LinkLibrary( 'bin/casual-domain-admin-cli',
    [
     Compile( 'source/manager/admin/cli.cpp'),
     ],
    [
     manager_archive,
     common_archive,
     'casual-common',
     'casual-serviceframework'
     ]
)

install_libs.append( target)

# pending send


pending_executable = LinkExecutable( 'bin/casual-domain-pending-message',
    [
      Compile( 'source/pending/message/main.cpp'),
    ],
    [
     pending_library,
     common_archive,
     'casual-common',
     'casual-configuration',
     'casual-serviceframework'
    ] 
)

install_bins.append( pending_executable)



#unittest lib for other modules to use (in unittest)
domain_unittest_library = LinkLibrary( 'bin/casual-domain-unittest',
    [
        Compile( 'source/manager/unittest/process.cpp'),
    ],
    [
        'casual-common',
        'casual-unittest',
    ]
)


target_simple_server = LinkExecutable( 'bin/test-simple-server',
    [
        Compile( 'unittest/source/simple_server.cpp'),
    ],
    [
     'casual-common'
    ])


target_test_domain = LinkUnittest( 'bin/test-casual-domain', 
    [ 
        Compile( 'unittest/source/manager/test_state.cpp'),
        Compile( 'unittest/source/manager/test_manager.cpp'),
        Compile( 'unittest/source/pending/test_message.cpp'),
    ],
    [
        manager_archive,
        domain_unittest_library,
        pending_library,
        'casual-common',
        'casual-configuration',
        'casual-serviceframework',
        'casual-unittest',
        'casual-configuration-example',
    ]) 

# We use domain-manager and simple-server from the unittests
Dependencies( target_test_domain, [ target_domain_manager, target_simple_server, pending_executable])


message_lib = LinkLibrary( 'bin/casual-delay-message', 
    [
      Compile( 'source/delay/message.cpp'),
    ],
    [ 
        common_archive,
        'casual-common'
    ]
    )

delay_objects = [
     Compile( 'source/delay/delay.cpp')
    ]


target_delay_message = LinkExecutable( 'bin/casual-delay-message',
    [
        Compile( 'source/delay/main.cpp'),
    ] + delay_objects,
    [
      message_lib,
      manager_archive,
      common_archive,
     'casual-common'
    ])


target_test_delay = LinkUnittest( 'bin/test-casual-domain-delay', 
    [ 
        Compile( 'unittest/source/test_delay.cpp'),
    ],
    [
     message_lib,
     common_archive,
     domain_unittest_library,
     'casual-common',
     'casual-unittest',
    ])        

#
# We execute 'target_domain_delay' from test-casual-domain-delay, so
# we need to make sure target_domain_delay is built before
#
Dependencies( target_test_delay, [ target_delay_message ])



Install( install_bins,'$(CASUAL_HOME)/bin')
Install( install_libs,'$(CASUAL_HOME)/lib')





