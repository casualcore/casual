

from casual.make.api import *



IncludePaths([
   'include',
   '../common/include',
   '../buffer/include',
   '../configuration/include',
   '../xatmi/include',
   '../serviceframework/include'] + 
   casual_make_optional_include_paths().split()
   )


LibraryPaths([
    'bin',
    '../common/bin',
    '../configuration/bin',
    '../serviceframework/bin',
    '../xatmi/bin'] + 
    casual_make_optional_library_paths().split()
   )


install_bins = []
install_libs = []
install_headers = []

common_archive = LinkArchive( 'bin/casual-domain-common', 
 [
    Compile( 'source/common.cpp'),
])

manager_archive = LinkArchive( 'bin/casual-domain-manager', 
 [
    Compile( 'source/transform.cpp'),
    Compile( 'source/manager/ipc.cpp'),
    Compile( 'source/manager/task.cpp'),
    Compile( 'source/manager/task/create.cpp'),
    Compile( 'source/manager/state.cpp'),
    Compile( 'source/manager/state/create.cpp'),
    Compile( 'source/manager/handle.cpp'),
    Compile( 'source/manager/admin/server.cpp'),
    Compile( 'source/manager/configuration.cpp'),
])

# utility for other 'managers'
pending_library = LinkLibrary( 'bin/casual-domain-utility',
    [
        Compile( 'source/pending/message/send.cpp'),
        Compile( 'source/configuration/fetch.cpp'),
    ],
    [
        common_archive,
        'casual-common',
        'casual-serviceframework'
     ]
)
install_libs.append( pending_library)


target_domain_manager = LinkExecutable( 'bin/casual-domain-manager',
    [
      Compile( 'source/manager/main.cpp'),
    ],
    [
     manager_archive,
     pending_library,
     common_archive,
     'casual-common',
     'casual-configuration',
     'casual-serviceframework'
    ] 
)

install_bins.append( target_domain_manager)


target = LinkLibrary( 'bin/casual-domain-admin-cli',
   [
      Compile( 'source/manager/admin/cli.cpp'),
   ],
   [
      manager_archive,
      common_archive,
      'casual-common',
      'casual-configuration',
      'casual-serviceframework'
   ]
)
install_libs.append( target)

# public api
domain_api = LinkLibrary( 'bin/casual-domain-api',
   [
      Compile( 'source/manager/api/state.cpp'),
      Compile( 'source/manager/api/internal/transform.cpp'),
   ],
   [
      common_archive,
      'casual-common',
      'casual-serviceframework'
   ]
)
install_libs.append( domain_api)

install_headers += [ 
   ( 'include/casual/domain/manager/api/model.h', 'casual/domain/manager/api'),
   ( 'include/casual/domain/manager/api/state.h', 'casual/domain/manager/api'),
]

# discovery
discovery_archive = LinkArchive( 'bin/casual-domain-discovery-archive',
    [
        Compile( 'source/discovery/common.cpp'),
    ]
)


discovery_executable = LinkExecutable( 'bin/casual-domain-discovery',
    [
        Compile( 'source/discovery/main.cpp'),
        Compile( 'source/discovery/handle.cpp'),
        Compile( 'source/discovery/state.cpp'),
    ],
    [
        discovery_archive,
        'casual-common',
    ]
)
install_bins.append( discovery_executable)

domain_discovery_library = LinkLibrary( 'bin/casual-domain-discovery',
    [
        Compile( 'source/discovery/api.cpp'),
    ],
    [
        discovery_archive,
        'casual-common',
    ]
)

install_libs.append( domain_discovery_library)

target = LinkLibrary( 'bin/casual-domain-discovery-admin-cli',
    [
        Compile( 'source/discovery/admin/cli.cpp'),
    ],
    [
        domain_discovery_library,
        'casual-common',
    ]
)

install_libs.append( target)

# pending send
pending_executable = LinkExecutable( 'bin/casual-domain-pending-message',
    [
      Compile( 'source/pending/message/main.cpp'),
    ],
    [
     pending_library,
     common_archive,
     'casual-common',
     'casual-configuration',
     'casual-serviceframework'
    ] 
)

install_bins.append( pending_executable)



#unittest lib for other modules to use (in unittest)
domain_unittest_library = LinkLibrary( 'bin/casual-domain-unittest',
    [
        Compile( 'source/manager/unittest/process.cpp'),
    ],
    [
        common_archive,
        'casual-common',
        'casual-unittest',
        
    ]
)


target_simple_server = LinkExecutable( 'bin/test-simple-server',
    [
        Compile( 'unittest/source/simple_server.cpp'),
    ],
    [
     'casual-common'
    ])


target_test_domain = LinkUnittest( 'bin/test-casual-domain', 
    [ 
        Compile( 'unittest/source/manager/test_state.cpp'),
        Compile( 'unittest/source/manager/test_manager.cpp'),
        Compile( 'unittest/source/manager/test_api.cpp'),
        Compile( 'unittest/source/pending/test_message.cpp'),
        Compile( 'unittest/source/test_discovery.cpp'),
    ],
    [
        common_archive,
        manager_archive,
        domain_discovery_library,
        domain_unittest_library,
        pending_library,
        domain_api,
        common_archive,
        'casual-common',
        'casual-xatmi',
        'casual-configuration',
        'casual-serviceframework',
        'casual-unittest',
        'casual-configuration-example',
    ]) 

# We use domain-manager and simple-server from the unittests
Dependencies( target_test_domain, [ target_domain_manager, target_simple_server, pending_executable, discovery_executable])


casual_home = os.getenv('CASUAL_HOME')

Install( install_bins, casual_home + '/bin')
Install( install_libs, casual_home + '/lib')
Install( install_headers, casual_home + '/include')





