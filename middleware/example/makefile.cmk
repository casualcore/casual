import casual.make.api as make
import casual.middleware.make.api as dsl
import os

make.IncludePaths( ['server/include',
    '../xatmi/include',
    '../common/include'] + 
    make.optional_include_paths()
    )
make.LibraryPaths( [ 'server/bin',
    '../common/bin',
    '../buffer/bin',
    '../xatmi/bin'] + 
    make.optional_library_paths()
   )


install_bin = []

casual_repository_root = make.source_root()


# make sure we use the tools we've built
make.Environment( 'PATH', casual_repository_root + '/bin' + os.pathsep + os.getenv('PATH'))

target = dsl.LinkServer( 'server/bin/casual-example-server',
    [ 
       make.Compile( 'server/source/example.cpp'),
       make.Compile( 'server/source/example/work.cpp')
    ],
    [ 
        'casual-common',
        'casual-buffer'
    ],
    'server/source/example.services.yaml')

install_bin.append( target)

# make sure we got a resource property file available when we build with a resource 
make.Environment( 'CASUAL_RESOURCE_CONFIGURATION_FILE', casual_repository_root + '/middleware/example/resources/resources.yaml')

target = dsl.LinkServer( 'server/bin/casual-example-resource-server',
    [ 
       make.Compile( 'server/source/example/resource.cpp')
    ],
    [ 
        'casual-common',
        'casual-buffer'
    ],
    'server/source/example/resource.services.yaml')

install_bin.append( target)


target = make.LinkExecutable( 'server/bin/casual-example-error-server',
    [ 
       make.Compile( 'server/source/example/error.cpp')
    ],
    [ 
        'casual-common',
        'casual-buffer'
    ])

install_bin.append( target)

make.LinkArchive( 'executable/bin/dummy', 
 [ make.Compile( 'executable/source/example.cpp') ]
)

# Install
make.Install( install_bin, dsl.paths().install + '/example/bin')

# domain examples
make.Install( [ 'domain/readme.md'], dsl.paths().install + '/example/domain')

# single domain minimal example
make.Install( [ 'domain/single/minimal/readme.md', 'domain/single/minimal/domain.env'], dsl.paths().install + '/example/domain/single/minimal')
make.Install( [ 'domain/single/minimal/configuration/domain.yaml'], dsl.paths().install + '/example/domain/single/minimal/configuration')

# multi domian minimal example
make.Install( [ 'domain/multiple/minimal/readme.md'], dsl.paths().install + '/example/domain/multiple/minimal')

make.Install( [ 'domain/multiple/minimal/domain1/domain.env'], dsl.paths().install + '/example/domain/multiple/minimal/domain1')
make.Install( [ 'domain/multiple/minimal/domain1/configuration/domain.yaml'], dsl.paths().install + '/example/domain/multiple/minimal/domain1/configuration')

make.Install( [ 'domain/multiple/minimal/domain2/domain.env'], dsl.paths().install + '/example/domain/multiple/minimal/domain2')
make.Install( [ 'domain/multiple/minimal/domain2/configuration/domain.yaml'], dsl.paths().install + '/example/domain/multiple/minimal/domain2/configuration')


# multi domian medium example
make.Install( [ 'domain/multiple/medium/readme.md'], dsl.paths().install + '/example/domain/multiple/medium')
make.Install( [ 'domain/multiple/medium/diagram/scenario.svg', 'domain/multiple/medium/diagram/scenario.uml'], dsl.paths().install + '/example/domain/multiple/medium/diagram')

make.Install( [ 'domain/multiple/medium/domainA/domain.env'], dsl.paths().install + '/example/domain/multiple/medium/domainA')
make.Install( [ 'domain/multiple/medium/domainA/configuration/domain.yaml'], dsl.paths().install + '/example/domain/multiple/medium/domainA/configuration')

make.Install( [ 'domain/multiple/medium/domainB/domain.env'], dsl.paths().install + '/example/domain/multiple/medium/domainB')
make.Install( [ 'domain/multiple/medium/domainB/configuration/domain.yaml'], dsl.paths().install + '/example/domain/multiple/medium/domainB/configuration')








