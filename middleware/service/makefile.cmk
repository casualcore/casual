import casual.make.api as make
import casual.middleware.make.api as dsl

make.IncludePaths( [
    'include',
    'unittest/include',
	'../common/include',
    '../configuration/include',
    '../domain/include',
	'../xatmi/include',
	'../serviceframework/include',
    ]
    + make.optional_include_paths()
    + dsl.paths().include.gtest
   )

make.LibraryPaths( [
    'bin',
    '../common/bin',
    '../serviceframework/bin',
    '../domain/bin',
	'../buffer/bin',
	'../configuration/bin',
   '../xatmi/bin']
    + make.optional_library_paths()
    + dsl.paths().library.gtest
   )


install_bins = []
install_libs = []
install_headers = []

logic_archive = make.LinkArchive( 'bin/casual-service-logic',
   [
   make.Compile( 'source/manager/handle.cpp'),
   make.Compile( 'source/manager/state.cpp'),
   make.Compile( 'source/manager/transform.cpp'),
   make.Compile( 'source/manager/configuration.cpp'),
   make.Compile( 'source/common.cpp'),
   make.Compile( 'source/manager/admin/server.cpp'),
   ])


target = make.LinkExecutable( 'bin/casual-service-manager',
	[ make.Compile( 'source/manager/main.cpp')],
	[
     logic_archive,
     'casual-common',
     'casual-domain-utility',
     'casual-domain-discovery',
     'casual-serviceframework',
     'casual-configuration']
   )

install_bins.append( target)



target = make.LinkExecutable( 'bin/casual-service-forward',
    [
        make.Compile( 'source/forward/main.cpp'),
        make.Compile( 'source/forward/handle.cpp')
    ],
    [
        logic_archive,
        'casual-domain-utility',
        'casual-common'
    ])

install_bins.append( target)
	
	
# admin-terminal

admin_api_lib = make.LinkLibrary( 'bin/casual-service-admin-api',
   [ 
      make.Compile( 'source/manager/admin/api.cpp')
   ],
   [
       logic_archive,
       'casual-common',
       'casual-serviceframework'
   ])
install_libs.append( admin_api_lib)

target = make.LinkLibrary( 'bin/casual-service-admin-cli',
    [ make.Compile( 'source/manager/admin/cli.cpp')],
    [ 
        admin_api_lib,
        logic_archive, 
        'casual-common', 
        'casual-serviceframework', 
    ])
 	
install_libs.append( target)

# public api
api_lib = make.LinkLibrary( 'bin/casual-service-api',
   [ 
      make.Compile( 'source/manager/api/state.cpp'),
      make.Compile( 'source/manager/api/model.cpp')
   ],
   [ 
      admin_api_lib,
      logic_archive,
      'casual-common',
      'casual-serviceframework', 
   ])

install_libs.append( api_lib)

install_headers += [ 
   ( 'include/casual/service/manager/api/model.h', 'casual/service/manager/api'),
   ( 'include/casual/service/manager/api/state.h', 'casual/service/manager/api'),
]



service_unittest = make.LinkLibrary( 'bin/casual-service-unittest',
    [ 
        make.Compile( 'unittest/source/utility.cpp'),
    ],
    [ 
        'casual-common',
        'casual-serviceframework',
    ])

 
make.LinkUnittest( 'unittest/bin/test-casual-service',
    [
      make.Compile( 'unittest/source/forward/test_cache.cpp'),
      make.Compile( 'unittest/source/manager/test_manager.cpp'),
      make.Compile( 'unittest/source/manager/test_state.cpp'),
      make.Compile( 'unittest/source/manager/test_api.cpp'),
    ],
    [
     logic_archive,
     api_lib,
     service_unittest,
     'casual-domain-utility',
     'casual-domain-discovery',
     'casual-common', 
     'casual-serviceframework',
     'casual-configuration', 
     'casual-unittest',
     'casual-domain-unittest',
     ])



# Install
make.Install( install_bins, dsl.paths().install + '/bin')
make.Install( install_libs, dsl.paths().install + '/lib')
make.Install( install_headers, dsl.paths().install + '/include')

