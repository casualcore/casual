//! 
//! Copyright (c) 2020, The casual project
//!
//! This software is licensed under the MIT license, https://opensource.org/licenses/MIT
//!

#include "casual/administration/cli.h"

#include "common/file.h"
#include "common/unittest.h"

#include "casual/argument.h"
#include "common/terminal.h"
#include "common/exception/capture.h"

#include <fstream>
#include <filesystem>

namespace casual
{
   using namespace common;

   namespace administration
   {
      namespace documentation
      {
         namespace local
         {
            namespace
            {

               template< typename H, typename F>
               void generate( 
                  std::vector< std::string> arguments, 
                  const std::filesystem::path& path,
                  H&& header,
                  F&& footer)
               {
                  // make sure we don't use colors...
                  terminal::output::directive().plain();

                  // make sure we create directories if not present
                  common::directory::create( path.parent_path());
                  std::ofstream out{ path};
                  header( out);

                  auto restore = unittest::capture::standard::out( out);

                  administration::cli::parse( std::move( arguments));
               
                  footer( out);
               }

               void generate( const std::filesystem::path& root)
               {
                  auto footer = []( auto& out)
                  {
                     out << "```\n";
                  };

                  auto generate_option = [&root, &footer]( auto option)
                  {
                     auto header = [option]( auto& out)
                     {
                        out << "# casual " << option << R"(

[//]: # (Attention! this is a generated markdown from casual-administration-cli-documentation - do not edit this file!)

```shell
)" << "host# casual --help " << option << "\n\n";
                     };

                     generate( 
                        { "--help", option}, 
                        root / "cli" / common::string::compose( option, ".operation.md"),
                        header,
                        footer);
                  };

                  generate_option( "domain");
                  generate_option( "service");
                  generate_option( "transaction");
                  generate_option( "queue");
                  generate_option( "gateway");
                  generate_option( "discovery");
                  generate_option( "buffer");
                  generate_option( "describe");
                  generate_option( "call");
                  generate_option( "internal");

                  // the casual cli
                  {

                     auto header = []( auto& out)
                     {
                        out << R"(# casual

```shell
)" << "host# casual --help " << "\n\n";
                     };

                     generate( 
                        { "--help"}, 
                        root / "cli" / "casual.operation.md",
                        header,
                        footer);
                  }
                 
               }

               
               void main( int argc, const char** argv)
               {
                  std::filesystem::path root;

                  argument::parse( "generate cli documentation", {
                     argument::Option{ std::tie( root), { "--root"}, "root for the generated markdown files"}( argument::cardinality::one())
                  }, argc, argv);

                  generate( root);

               }
            } // <unnamed>
         } // local
         
      } // documentation
   } // administration
} // casual


int main( int argc, const char** argv)
{
   return casual::common::exception::main::log::guard( [=]()
   {
      casual::administration::documentation::local::main( argc, argv);
   });
}