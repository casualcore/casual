# do not load, if casual-admin is not in $PATH
which casual-admin &> /dev/null || return 0

__array_index_of() {
	local needle="${1}"; shift
	local haystack=($@)
	local i

	for ((i=0; i<${#haystack[@]}; i++)) {
		local straw="${haystack[$i]}"
		[[ "${straw}" == "${needle}" ]] || continue
		echo "${i}"
		return 0
	}

	echo "-1"

	return 1
}

# shellcheck disable=SC2178,SC2128
__string_index_of() {
	local needle="${1}"
	local haystack="${2}"
	local match="${haystack%%${needle}*}"
	[[ "${match}" == "${haystack}" ]] && echo "${#haystack}" || echo "${#match}"
}

_casual_admin() {
	local current previous arguments options i index cmd
	local parameters=("${COMP_WORDS[@]:0:COMP_CWORD}")
	COMPREPLY=()
	options=()
	current="${COMP_WORDS[COMP_CWORD]}"
	previous="${COMP_WORDS[COMP_CWORD-1]}"

	# insert `casual-bash-completion` before any arguments starting with "--"
	# XXX: when context is used, this might not result in expected behavior
    cmd="${parameters[*]}"
	index="$(__string_index_of "--" "${cmd}")"
	cmd="${cmd%%--*} casual-bash-completion ${cmd:${index}:${#cmd}}"
	unset index

	arguments=($(${cmd}))

	# very much fail, if we don't have any arguments
	(( ${#arguments[@]} > 0 )) || return 1

	# only actual arguments (i.e. excluding cardinality)
	for ((i=0; i<${#arguments[@]}; i+=3)) {
		options+=(${arguments[$i]})
	}

	# look up the index of the argument, so we can find cardinality later
	[[ -n "${previous}" ]] && index=$(__array_index_of "${previous}" "${arguments[@]}")

	# previous completed word was found, let's see what we can do with it
	if (( index > -1 )); then
		local cardinality_min="${arguments[${index}+1]}"
		local cardinality_max="${arguments[${index}+2]}"
		options=()

		# assume cardinality of (0, 0) means you can stack other arguments after it
		if (( cardinality_min == 0 && cardinality_max == 0 )) && [[ "${previous}" != *"help" ]]; then
			for ((i=1; i<${#arguments[@]}; i+=3)) {
				local option="${arguments[$i-1]}"
				#(( ${arguments[$i]} > 0 || ${arguments[$i+1]} > 0 )) && continue

				# if the option already has been included in the current context, don't suggest it again
				# and don't suggest any help options either
				[[ "${COMP_WORDS[*]}" == *"${option}"* || "${option}" == "--help" ]] && continue
				options+=("${option}")
			}
		fi
		# XXX: else/else if case here, to handle usage of "context" when implemented, to hopefully be able
		#      to get suggestions on values
	fi

	COMPREPLY=($(compgen -W "${options[*]}" -- "${current}"))

	return 0

}
complete -F _casual_admin casual-admin
