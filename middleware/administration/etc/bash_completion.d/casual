#!/usr/bin/env bash

__fs_list() {
    local where="${1}"

    ls -d "${where}"* 2> /dev/null
}

# needed for bash 3.x compability
__compopt() {
    type compopt &> /dev/null && compopt "$@"
}

_casual() {
    # do not load, if casual is not in $PATH
    type casual &> /dev/null || return 0

    local current previous arguments cmd
    local parameters=("${COMP_WORDS[@]:0:COMP_CWORD}")
    COMPREPLY=()
    current="${COMP_WORDS[COMP_CWORD]}"
    previous="${COMP_WORDS[COMP_CWORD-1]}"

    # insert `casual-bash-completion` before any arguments starting with "--"
    cmd=(${parameters[*]})

    # remove `casual`, and build our completion command
    unset 'cmd[0]'

    cmd="casual casual-bash-completion ${cmd[*]}"
    arguments=($(${cmd}))

    # very much fail, if we don't have any arguments
    (( ${#arguments[@]} > 0 )) || return 1

    # always add space after completed option
    __compopt +o nospace

    if [[ "${arguments[0]}" == "<value>" ]]; then
        [[ -d "${current}" && "${current: -1}" != "/" ]] && current="${current}/"
        unset 'arguments[0]'

        # if completion suggests `<value>`, but last completed argument exists (i.e. a file or directory)
        # we're just going to ignore that we got `<value>`
        if [[ ! -e "${previous}" ]]; then
            __compopt -o nospace
            arguments+=($(__fs_list "${current}"))
        fi
    fi

    COMPREPLY=($(compgen -W "${arguments[*]}" -- "${current}"))

    return 0

}
complete -F _casual casual
