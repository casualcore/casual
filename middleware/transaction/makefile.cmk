import casual.make.api as make
import casual.middleware.make.api as dsl
    
make.IncludePaths( ['include',
    'unittest/include',
    '../common/include',
    '../xatmi/include',
    '../configuration/include',
    '../configuration/unittest/include',
    '../domain/include',
    '../domain/unittest/include',
    '../cli/include',
    '../serviceframework/include',
    '../../thirdparty/database/include']
    + make.optional_include_paths()
    + dsl.paths().include.gtest
    )

make.LibraryPaths( ['bin',
    '../common/bin',
    '../buffer/bin',
    '../configuration/bin',
    '../domain/bin',
    '../cli/bin',
    '../serviceframework/bin',
    '../xatmi/bin']
    + make.optional_library_paths()
    + dsl.paths().library.gtest
   )


install_lib = []
install_bin = []
install_headers = []

# make.Compile and link the transaction manager
manager_archive = make.LinkArchive( 'bin/manager-archive',
    [
        make.Compile( 'source/common.cpp'),
        make.Compile( 'source/global.cpp'),
        make.Compile( 'source/manager/state.cpp'),
        make.Compile( 'source/manager/action.cpp'),
        make.Compile( 'source/manager/transform.cpp'),
        make.Compile( 'source/manager/log.cpp'),
        make.Compile( 'source/manager/handle.cpp'),
        make.Compile( 'source/manager/admin/server.cpp'),
        make.Compile( 'source/manager/admin/transform.cpp'),
    ])


manager = make.LinkExecutable( 'bin/casual-transaction-manager',
    [
        make.Compile( 'source/manager/main.cpp')
    ],
    [ 
        manager_archive, 
        'casual-serviceframework', 
        'casual-common', 
        'casual-configuration',
        'casual-domain-utility',
        'sqlite3',
    ])

install_bin.append( manager)


target = make.LinkLibrary( 'bin/casual-transaction-admin-cli',
    [
        make.Compile( 'source/manager/admin/cli.cpp')
    ],
    [ 
        manager_archive,
        'casual-cli',
        'casual-domain-utility',
        'casual-serviceframework', 
        'casual-common',
    ])


install_lib.append( target)


# make.Compile and link resource-proxy-server lib
target = make.LinkLibrary( 'bin/casual-resource-proxy-server',
   [
        make.Compile( 'source/resource/proxy/server.cpp'),
        make.Compile( 'source/resource/proxy.cpp'),
   ],
   [ manager_archive, 'casual-common', 'casual-serviceframework'])

install_lib.append( target)

install_headers.append( ( 'include/casual/transaction/resource/proxy/server.h', 'casual/transaction/resource/proxy'))


# Mockup resource proxy
target = make.LinkExecutable( 'bin/rm-proxy-casual-mockup',
    [ make.Compile( 'source/resource/template_build_resource_proxy.cpp')],
    [ 
        'casual-mockup-rm', 
        'casual-resource-proxy-server'
    ])


install_bin.append( target)

unittest_library = make.LinkLibrary( 'bin/casual-transaction-unittest',
    [ 
        make.Compile( 'unittest/source/utility.cpp')
    ],
    [
        'casual-common',
        'casual-serviceframework', 
    ]
)


# unittest
test_transaction = make.LinkUnittest( 'bin/test-casual-transaction',
    [
        # temp make.Compile( 'unittest/source/manager/test_state.cpp'),
        make.Compile( 'unittest/source/manager/test_log.cpp'),
        make.Compile( 'unittest/source/test_admin.cpp'),
        make.Compile( 'unittest/source/test_manager.cpp'),
        
    ],
    [ 
        manager_archive,
        unittest_library,
        'casual-common', 
        'casual-serviceframework', 
        'casual-configuration', 
        'casual-domain-utility',
        'sqlite3',
        'casual-unittest',
        'casual-domain-unittest',
        'casual-mockup-rm',

    ])

# make sure we link manager before we run tests 
make.Dependencies( test_transaction, [ manager])



make.Install( install_bin, dsl.paths().install + '/bin')
make.Install( install_lib, dsl.paths().install + '/lib')
make.Install( install_headers, dsl.paths().install + '/include')




