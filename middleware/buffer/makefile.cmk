import casual.make.api as make
import casual.middleware.make.api as dsl
import os


make.IncludePaths( [
   'include',
   '../common/include',
   '../cli/include',
   '../xatmi/include']
    + make.optional_include_paths()
    + dsl.paths().include.gtest
   )


make.LibraryPaths([
    'bin',
    '../common/bin',
    '../cli/bin',
    '../xatmi/bin'] + make.optional_library_paths() + dsl.paths().library.gtest
   )


install_lib = []
install_bin = []
install_headers = []

lib_buffer = make.LinkLibrary( 'bin/casual-buffer',
    [
     make.Compile( 'source/field.cpp'),
     make.Compile( 'source/octet.cpp'),
     make.Compile( 'source/order.cpp'),
     make.Compile( 'source/string.cpp'),
     
     make.Compile( 'source/common.cpp'),
     make.Compile( 'source/internal/field/string.cpp'),
    ],
    [
     'casual-common'
    ])

install_lib.append( lib_buffer)

install_headers += [ 
   ( 'include/casual/buffer/field.h', 'casual/buffer'),
   ( 'include/casual/buffer/octet.h', 'casual/buffer'),
   ( 'include/casual/buffer/order.h', 'casual/buffer'),
   ( 'include/casual/buffer/string.h', 'casual/buffer'),
   ( 'include/casual/buffer/internal/field/string.h', 'casual/buffer/internal/field'),
]

casual_field_make_header = make.LinkExecutable( 'bin/casual-buffer-field-make-header', 
    [
     make.Compile( 'tools/source/field.cpp'),
    ], 
    [ 
     'casual-common',  
      lib_buffer
    ])


install_bin.append( casual_field_make_header)


# cli

lib_cli = make.LinkLibrary( 'bin/casual-buffer-cli',
    [ 
        make.Compile( 'source/admin/cli.cpp')
    ],
    [
        lib_buffer,
        'casual-cli',
        'casual-common'
    ]
)
install_lib.append( lib_cli)


# Unittest
make.LinkUnittest( 'bin/test-buffer',
   [
    make.Compile( 'unittest/source/test_field_buffer.cpp'),
    make.Compile( 'unittest/source/test_octet_buffer.cpp'),
    make.Compile( 'unittest/source/test_order_buffer.cpp'),
    make.Compile( 'unittest/source/test_string_buffer.cpp'),
    make.Compile( 'unittest/source/test_field_stream.cpp'),
    make.Compile( 'unittest/source/internal/field/test_string.cpp'),
    make.Compile( 'unittest/source/internal/field/test_table.cpp'),
   ],
   [ 
    lib_buffer, 'casual-common', 'casual-xatmi', 'casual-unittest'
   ])  
   
# Sample
exe_field_sample = make.LinkExecutable( 'bin/casual-buffer-protocol-sample',
    [
     make.Compile( 'sample/protocol/source/field.cpp'),
    ],
    [
     lib_buffer, 'casual-xatmi', 'casual-common'
    ])
    
    

lib_casual_buffer_sample = make.LinkLibrary( 'bin/casual-buffer-sample',
    [
     make.Compile( 'sample/client/source/field.cpp'),
     make.Compile( 'sample/client/source/octet.cpp'),
     make.Compile( 'sample/client/source/order.cpp'),
     make.Compile( 'sample/client/source/string.cpp'),
    ],
    [
     lib_buffer, 'casual-xatmi'
    ])


binary = make.LinkExecutable( 'bin/casual-buffer-field-from-human', 
    [
        make.Compile( 'tools/source/field/from_human.cpp'),
    ], 
    [ 
        lib_cli,
        lib_buffer,
        'casual-common', 
    ])
    
install_bin.append( binary)


binary = make.LinkExecutable( 'bin/casual-buffer-field-to-human', 
    [
        make.Compile( 'tools/source/field/to_human.cpp'),
    ], 
    [
        lib_cli,
        lib_buffer,
        'casual-common'
    ])
    
install_bin.append( binary)

binary = make.LinkExecutable( 'bin/casual-buffer-duplicate', 
    [
        make.Compile( 'tools/source/duplicate.cpp'),
    ], 
    [
        lib_cli, 
        'casual-common', 
    ])
    
install_bin.append( binary)


binary = make.LinkExecutable( 'bin/casual-buffer-generic-compose', 
    [
        make.Compile( 'tools/source/generic/compose.cpp'),
    ], 
    [
        lib_cli,
        'casual-common', 
    ])
    
install_bin.append( binary)

binary = make.LinkExecutable( 'bin/casual-buffer-generic-extract', 
    [
        make.Compile( 'tools/source/generic/extract.cpp'),
    ], 
    [
        lib_cli, 
        'casual-common', 
    ])
    
install_bin.append( binary)

binary = make.LinkExecutable( 'bin/casual-buffer-field-serialize', 
    [
     make.Compile( 'tools/source/field/serialize.cpp'),
    ], 
    [ 
     'casual-common',
     lib_buffer
    ])
    
install_bin.append( binary)



# Install
make.Install( install_lib,  dsl.paths().install + '/lib')
make.Install( install_bin,  dsl.paths().install + '/bin')
make.Install( install_headers,  dsl.paths().install + '/include')

# GenerateDocumentation


def casual_buffer_protocol_sample( input):
    import casual.make.tools.executor as executor

    cmd = "bin/casual-buffer-protocol-sample"

    print( "documentation: generate buffer documentation")

    context_directory = os.path.dirname(input['target'].makefile())
    executor.command(cmd, directory=context_directory, show_command=False)

dsl.GenerateDocumentation(".", dependencies = [exe_field_sample], generator_function = casual_buffer_protocol_sample)



