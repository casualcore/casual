import casual.make.api as make
import casual.middleware.make.api as dsl



make.IncludePaths([
    'include',
    'unittest/include',
    '../common/include',
    '../configuration/include',
    '../domain/include',
    '../service/include',
    '../queue/include',
    '../xatmi/include',
    '../serviceframework/include',
    '../service/unittest/include',
    ]    
    + make.optional_include_paths()
    + dsl.paths().include.gtest
   )


make.LibraryPaths([
    'bin',
    '../common/bin',
    '../configuration/bin',
    '../domain/bin',
    '../service/bin',
    '../serviceframework/bin',
    '../xatmi/bin',
    '../queue/bin']
    + make.optional_library_paths()
    + dsl.paths().library.gtest
   )


install_lib = []
install_bin = []
install_example_bin = []

common_archive = make.LinkArchive( 'bin/casual-gateway-common',
    [
        make.Compile( 'source/environment.cpp'),
        make.Compile( 'source/common.cpp'),
        make.Compile( 'source/manager/state.cpp'),
        make.Compile( 'source/group/tcp.cpp'),
    ])
        

# The gateway-manager
target = make.LinkExecutable( 'bin/casual-gateway-manager',
    [
        make.Compile( 'source/manager/main.cpp'),
        make.Compile( 'source/manager/handle.cpp'),
        make.Compile( 'source/manager/admin/server.cpp'),
        make.Compile( 'source/manager/transform.cpp'),
    ],
    [ 
        common_archive,
        'casual-serviceframework', 
        'casual-common',
        'casual-domain-utility',
    ])

install_bin.append( target)

target = make.LinkLibrary( 'bin/casual-gateway-admin-cli',
    [
        make.Compile( 'source/manager/admin/cli.cpp'),
    ],
    [
        common_archive,
        'casual-serviceframework', 
        'casual-common', 
    ])

install_lib.append( target)

# Outbound

outbound_archive = make.LinkArchive( 'bin/casual-gateway-outbound-archive',
    [
        make.Compile( 'source/group/outbound/state.cpp'),
        make.Compile( 'source/group/outbound/handle.cpp'),
        make.Compile( 'source/group/outbound/error/reply.cpp'),
    ]
)

## regular outbound
target = make.LinkExecutable( 'bin/casual-gateway-outbound-group',
    [
        make.Compile( 'source/group/outbound/main.cpp'),
    ],
    [
        outbound_archive,
        common_archive,
        'casual-domain-discovery',
        'casual-common',  
    ])
     
install_bin.append( target)

## reverse outbound
target = make.LinkExecutable( 'bin/casual-gateway-outbound-reverse-group',
    [
        make.Compile( 'source/group/outbound/reverse/main.cpp'),
    ],
    [
        outbound_archive,
        common_archive,
        'casual-domain-discovery',
        'casual-common',  
    ])
     
install_bin.append( target)

# Inbound

inbound_archive = make.LinkArchive( 'bin/casual-gateway-inbound-archive',
    [
        make.Compile( 'source/group/inbound/handle.cpp'),
        make.Compile( 'source/group/inbound/state.cpp'),
    ]
)

##  regular inbound
target = make.LinkExecutable( 'bin/casual-gateway-inbound-group',
[
    make.Compile( 'source/group/inbound/main.cpp'),
],
[
    inbound_archive,
    common_archive, 
    'casual-domain-discovery',
    'casual-common', 
])

install_bin.append( target)

# reverse inbound
target = make.LinkExecutable( 'bin/casual-gateway-inbound-reverse-group',
    [
        make.Compile( 'source/group/inbound/reverse/main.cpp'),
    ],
    [
        inbound_archive,
        common_archive, 
        'casual-domain-discovery',
        'casual-common',  
    ])
     
install_bin.append( target)

target = make.LinkExecutable( 'bin/casual-gateway-group-tcp-connector',
    [
        make.Compile( 'source/group/tcp/connector/main.cpp')
    ],
    [
        common_archive,
        'casual-common',
    ])

install_bin.append( target)

# protocol example
protocol_objects = [
    make.Compile( 'source/documentation/protocol/example.cpp')
]

unittest_archive = make.LinkArchive( 'bin/casual-gateway-unittest',
    [
        make.Compile( 'unittest/source/utility.cpp'),
    ]
)

# Unittest

target_unittest = make.LinkUnittest( 'bin/test-casual-gateway',
   [
        
        make.Compile( 'unittest/source/test_manager.cpp'),
        make.Compile( 'unittest/source/test_protocol.cpp'),
        make.Compile( 'unittest/source/group/outbound/test_state.cpp'),
        make.Compile( 'unittest/source/test_reverse.cpp'),
   ] + protocol_objects, 
   [ 
       outbound_archive,
       common_archive,
       unittest_archive, 
       'casual-serviceframework',
       'casual-queue-api',
       'casual-common',
       'casual-domain-discovery',
       'casual-configuration',
       'casual-unittest',
       'casual-domain-unittest',
       'casual-service-unittest',
    ]) 

# Make sure we link the executables before we run the unittest
make.Dependencies( target_unittest, install_bin)





target = make.LinkExecutable( "bin/casual-gateway-markdown-protocol",
    [
        make.Compile( 'source/documentation/protocol/markdown.cpp')
    ] + protocol_objects,
    [
        'casual-common'
    ])

install_example_bin.append( target)

target = make.LinkExecutable( "bin/casual-gateway-binary-protocol",
    [
        make.Compile( 'source/documentation/protocol/binary.cpp')
    ] + protocol_objects,
    [
        'casual-common'
    ])

install_example_bin.append( target)



make.Install( install_example_bin, dsl.paths().install + '/example/bin')
make.Install( install_bin, dsl.paths().install + '/bin')
make.Install( install_lib, dsl.paths().install + '/lib')


