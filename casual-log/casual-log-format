#!/usr/bin/python



#
# Imports
#
import sys
import os
import errno
import subprocess
import optparse
import re
import signal


class  Color:
    __magenta = '\033[0;35m'
    __red = '\033[31m'
    __blue = '\033[34m'
    __green = '\033[32m'
    __grey = '\033[30;1m'
    __WARNING = '\033[0;23m'
    __error = '\033[91m'
    
    __yellow = '\033[33m'
    __bold_yellow = '\033[33;1m'
    
    __white = '\033[37m'
    __bold_white = '\033[37;1m'
    
    
    __ENDC = '\033[0m'
    
    def grey( self, string):
        return self.__grey + string + self.__ENDC
    
    def header( self, string):
        return self.__magenta + string + self.__ENDC
    
    def red( self, string):
        return self.__red + string + self.__ENDC
    
    def blue( self, string):
        return self.__blue + string + self.__ENDC

    def green( self, string):
        return self.__green + string + self.__ENDC
    
    def warning( self, string):
        return self.__WARNING + string + self.__ENDC
    
    def error( self, string):
        return self.__error + string + self.__ENDC
    
    def yellow( self, string):
        return self.__yellow + string + self.__ENDC
    
    def bold_yellow( self, string):
        return self.__bold_yellow + string + self.__ENDC
    
    def bold_white( self, string):
        return self.__bold_white + string + self.__ENDC
    
    def white( self, string):
        return self.__white + string + self.__ENDC

color=Color()


def domain( name):
    
    if( len( name) > domain.size):
        domain.size = len( name);
    
    return name.ljust( domain.size);
    
domain.size = 0;


def normalizePID( id):
    
    return id.rjust( 8);
    


def truncateUUID( uuid):
    # take the first 13:
    if uuid:
        return uuid[:13];
    else:
        return '             ';

def truncateXID( xid):
    # 590b07bd-0903-40ec-9faa-2156b90a2756:1c04d1e1-886f-4820-bc9f-fb66ababf7d2
    # -> 2156b90a2756:1c04d1e1
    
    if xid:
        return xid[24: 24 + 21];
    else:
        return '                     ';


def truncateThread( pid, thread):
    #truncateThread.count;
    result = truncateThread.threads.get( thread);
    
    if not result:
        result = truncateThread.threads[ thread] = truncateThread.count;
        truncateThread.count += 1;
        
    return str( result);
    

truncateThread.threads = {};
truncateThread.count = 0;


def category( name):
    
    for match in category.switch:
        if match[ 0].match( name):
            return match[ 1]( name)
    
    return name;

category.switch = [
    [ re.compile( 'error'), color.error],
    [ re.compile( 'warning'), color.warning],
    [ re.compile( 'information'), color.white],
    [ re.compile( 'debug'), color.green],
    [ re.compile( 'casual[.].*'), color.blue],                
]



def format( input, output):
    
    line = input.readline();
    
    while( line):
        
        rows = line.split( '|', 9);
        
        if( len( rows) == 10):
            
            pid = rows[ 4];
            thread = truncateThread( pid, rows[ 5]);
            
            output.write( rows[ 0]);
            output.write( '|');
            output.write( color.blue( domain( rows[ 1])));
            output.write( '|');
            output.write( color.yellow( truncateUUID( rows[ 2])));
            output.write( '|');
            output.write( color.yellow( truncateXID( rows[ 3])));
            output.write( '|');
            output.write( color.white( normalizePID( pid)));
            output.write( '|');
            output.write( thread);
            output.write( '|');
            output.write( color.white( rows[ 6]));
            output.write( '|');
            output.write( category( rows[ 7]));
            output.write( '|');
            output.write( color.yellow( rows[ 8]));
            output.write( '|');
            output.write( rows[ 9]);
            #sys.stdout.write( '\n');
        else:
            output.write( line)
    
        line = input.readline();
    

# def handler(number, frame):
#     sys.stderr.write( "signal: " + str( number) + " received\n");
#     pass;
#     
# 
# def less( input):
#     try:
#         signal.signal(signal.SIGINT, handler)
#         signal.signal(signal.SIGILL, handler)
#         
#         process = subprocess.Popen( ['less', '-r'], stdin=subprocess.PIPE, universal_newlines=True)
#         
#         output = process.stdin;
#         
#         #process.stdin = sys.stdout;
#     
#         format( input, output);
#     
#         process.communicate();
#         
#     except IOError as e:
#         if e.errno != errno.EPIPE:
#             raise
#     


if __name__ == '__main__':

    parser = optparse.OptionParser("""
        usage: %prog [logfile...]
        
        Format of the logfile:
        
        <time>|<domain>|<execution id>|<transaction id>|<process id>|<thread id>|<executable>|<log category>|<service>|<message>...
        
        """)
    
    (options, args) = parser.parse_args()
    

    if len( args) > 0:
        with open( args[ 0]) as infile:
            format( infile, sys.stdout);
    
    elif not sys.stdin.isatty():
        format( sys.stdin, sys.stdout);
        
    elif os.environ["CASUAL_DOMAIN_HOME"]:
        with open( os.environ["CASUAL_DOMAIN_HOME"] + '/casual.log') as infile:
            format( infile, sys.stdout);
    

